<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="454.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="437" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="437" > </text>
<g id="frames">
<g >
<title>unmap_single_vma (2 samples, 1.04%)</title><rect x="987.2" y="245" width="12.3" height="15.0" fill="rgb(242,51,16)" rx="2" ry="2" />
<text  x="990.19" y="255.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.52%)</title><rect x="255.8" y="213" width="6.2" height="15.0" fill="rgb(229,57,45)" rx="2" ry="2" />
<text  x="258.83" y="223.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.52%)</title><rect x="329.6" y="197" width="6.1" height="15.0" fill="rgb(231,183,49)" rx="2" ry="2" />
<text  x="332.58" y="207.5" ></text>
</g>
<g >
<title>copy_page_to_iter (1 samples, 0.52%)</title><rect x="440.2" y="133" width="6.2" height="15.0" fill="rgb(249,66,6)" rx="2" ry="2" />
<text  x="443.21" y="143.5" ></text>
</g>
<g >
<title>generic_file_read_iter (2 samples, 1.04%)</title><rect x="421.8" y="213" width="12.3" height="15.0" fill="rgb(218,154,40)" rx="2" ry="2" />
<text  x="424.77" y="223.5" ></text>
</g>
<g >
<title>google::protobuf::GoogleOnceInitImpl (1 samples, 0.52%)</title><rect x="895.0" y="277" width="6.1" height="15.0" fill="rgb(210,165,46)" rx="2" ry="2" />
<text  x="898.00" y="287.5" ></text>
</g>
<g >
<title>orc::StringDictionaryColumnReader::~StringDictionaryColumnReader (17 samples, 8.85%)</title><rect x="778.2" y="357" width="104.5" height="15.0" fill="rgb(250,205,14)" rx="2" ry="2" />
<text  x="781.23" y="367.5" >orc::StringD..</text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.52%)</title><rect x="882.7" y="213" width="6.2" height="15.0" fill="rgb(219,175,48)" rx="2" ry="2" />
<text  x="885.71" y="223.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.52%)</title><rect x="981.0" y="245" width="6.2" height="15.0" fill="rgb(245,170,39)" rx="2" ry="2" />
<text  x="984.04" y="255.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.52%)</title><rect x="882.7" y="165" width="6.2" height="15.0" fill="rgb(240,136,44)" rx="2" ry="2" />
<text  x="885.71" y="175.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.52%)</title><rect x="993.3" y="197" width="6.2" height="15.0" fill="rgb(241,179,7)" rx="2" ry="2" />
<text  x="996.33" y="207.5" ></text>
</g>
<g >
<title>do_user_addr_fault (39 samples, 20.31%)</title><rect x="108.3" y="293" width="239.7" height="15.0" fill="rgb(242,75,9)" rx="2" ry="2" />
<text  x="111.33" y="303.5" >do_user_addr_fault</text>
</g>
<g >
<title>page_remove_rmap (1 samples, 0.52%)</title><rect x="987.2" y="197" width="6.1" height="15.0" fill="rgb(254,36,42)" rx="2" ry="2" />
<text  x="990.19" y="207.5" ></text>
</g>
<g >
<title>alloc_pages_vma (2 samples, 1.04%)</title><rect x="255.8" y="229" width="12.3" height="15.0" fill="rgb(247,183,23)" rx="2" ry="2" />
<text  x="258.83" y="239.5" ></text>
</g>
<g >
<title>all (192 samples, 100%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(207,23,0)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>mmput (2 samples, 1.04%)</title><rect x="987.2" y="293" width="12.3" height="15.0" fill="rgb(243,29,21)" rx="2" ry="2" />
<text  x="990.19" y="303.5" ></text>
</g>
<g >
<title>copy_page_to_iter (2 samples, 1.04%)</title><rect x="421.8" y="181" width="12.3" height="15.0" fill="rgb(209,153,53)" rx="2" ry="2" />
<text  x="424.77" y="191.5" ></text>
</g>
<g >
<title>async_page_fault (4 samples, 2.08%)</title><rect x="397.2" y="341" width="24.6" height="15.0" fill="rgb(223,112,35)" rx="2" ry="2" />
<text  x="400.19" y="351.5" >a..</text>
</g>
<g >
<title>__vm_munmap (1 samples, 0.52%)</title><rect x="882.7" y="261" width="6.2" height="15.0" fill="rgb(230,91,53)" rx="2" ry="2" />
<text  x="885.71" y="271.5" ></text>
</g>
<g >
<title>new_sync_read (13 samples, 6.77%)</title><rect x="901.1" y="261" width="79.9" height="15.0" fill="rgb(233,65,53)" rx="2" ry="2" />
<text  x="904.15" y="271.5" >new_sync_..</text>
</g>
<g >
<title>google::protobuf::GoogleOnceInitImpl (1 samples, 0.52%)</title><rect x="888.9" y="357" width="6.1" height="15.0" fill="rgb(211,209,16)" rx="2" ry="2" />
<text  x="891.85" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;char*, bool&gt;::pair&lt;char*&amp;, bool, true&gt; (1 samples, 0.52%)</title><rect x="895.0" y="37" width="6.1" height="15.0" fill="rgb(240,142,11)" rx="2" ry="2" />
<text  x="898.00" y="47.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (1 samples, 0.52%)</title><rect x="981.0" y="325" width="6.2" height="15.0" fill="rgb(207,91,44)" rx="2" ry="2" />
<text  x="984.04" y="335.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (1 samples, 0.52%)</title><rect x="981.0" y="213" width="6.2" height="15.0" fill="rgb(239,209,5)" rx="2" ry="2" />
<text  x="984.04" y="223.5" ></text>
</g>
<g >
<title>__do_munmap (1 samples, 0.52%)</title><rect x="882.7" y="245" width="6.2" height="15.0" fill="rgb(249,213,18)" rx="2" ry="2" />
<text  x="885.71" y="255.5" ></text>
</g>
<g >
<title>__libc_csu_init (1 samples, 0.52%)</title><rect x="895.0" y="373" width="6.1" height="15.0" fill="rgb(240,64,31)" rx="2" ry="2" />
<text  x="898.00" y="383.5" ></text>
</g>
<g >
<title>__munmap (1 samples, 0.52%)</title><rect x="882.7" y="325" width="6.2" height="15.0" fill="rgb(219,203,25)" rx="2" ry="2" />
<text  x="885.71" y="335.5" ></text>
</g>
<g >
<title>google::protobuf::internal::WireFormatLite::ReadBytes (1 samples, 0.52%)</title><rect x="895.0" y="85" width="6.1" height="15.0" fill="rgb(252,124,47)" rx="2" ry="2" />
<text  x="898.00" y="95.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.52%)</title><rect x="212.8" y="277" width="6.2" height="15.0" fill="rgb(224,95,5)" rx="2" ry="2" />
<text  x="215.81" y="287.5" ></text>
</g>
<g >
<title>vfs_read (1 samples, 0.52%)</title><rect x="440.2" y="229" width="6.2" height="15.0" fill="rgb(241,0,23)" rx="2" ry="2" />
<text  x="443.21" y="239.5" ></text>
</g>
<g >
<title>orc::RleDecoderV2::nextDelta (2 samples, 1.04%)</title><rect x="1091.7" y="373" width="12.3" height="15.0" fill="rgb(224,45,11)" rx="2" ry="2" />
<text  x="1094.67" y="383.5" ></text>
</g>
<g >
<title>do_async_page_fault (1 samples, 0.52%)</title><rect x="348.0" y="293" width="6.2" height="15.0" fill="rgb(218,76,12)" rx="2" ry="2" />
<text  x="351.02" y="303.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (1 samples, 0.52%)</title><rect x="440.2" y="181" width="6.2" height="15.0" fill="rgb(247,223,39)" rx="2" ry="2" />
<text  x="443.21" y="191.5" ></text>
</g>
<g >
<title>async_page_fault (39 samples, 20.31%)</title><rect x="108.3" y="357" width="239.7" height="15.0" fill="rgb(246,50,15)" rx="2" ry="2" />
<text  x="111.33" y="367.5" >async_page_fault</text>
</g>
<g >
<title>do_user_addr_fault (4 samples, 2.08%)</title><rect x="397.2" y="277" width="24.6" height="15.0" fill="rgb(208,203,16)" rx="2" ry="2" />
<text  x="400.19" y="287.5" >d..</text>
</g>
<g >
<title>copy_page (1 samples, 0.52%)</title><rect x="348.0" y="181" width="6.2" height="15.0" fill="rgb(223,158,2)" rx="2" ry="2" />
<text  x="351.02" y="191.5" ></text>
</g>
<g >
<title>google::protobuf::GoogleOnceInit (1 samples, 0.52%)</title><rect x="895.0" y="293" width="6.1" height="15.0" fill="rgb(219,113,43)" rx="2" ry="2" />
<text  x="898.00" y="303.5" ></text>
</g>
<g >
<title>orc::BooleanRleDecoderImpl::next (15 samples, 7.81%)</title><rect x="999.5" y="373" width="92.2" height="15.0" fill="rgb(224,53,11)" rx="2" ry="2" />
<text  x="1002.48" y="383.5" >orc::Boolea..</text>
</g>
<g >
<title>_GLOBAL__sub_I_ClientNamenodeProtocol.pb.cc (1 samples, 0.52%)</title><rect x="888.9" y="373" width="6.1" height="15.0" fill="rgb(244,63,49)" rx="2" ry="2" />
<text  x="891.85" y="383.5" ></text>
</g>
<g >
<title>uncharge_page (1 samples, 0.52%)</title><rect x="993.3" y="149" width="6.2" height="15.0" fill="rgb(245,1,41)" rx="2" ry="2" />
<text  x="996.33" y="159.5" ></text>
</g>
<g >
<title>unmap_page_range (2 samples, 1.04%)</title><rect x="987.2" y="229" width="12.3" height="15.0" fill="rgb(218,151,40)" rx="2" ry="2" />
<text  x="990.19" y="239.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (1 samples, 0.52%)</title><rect x="268.1" y="229" width="6.2" height="15.0" fill="rgb(229,30,47)" rx="2" ry="2" />
<text  x="271.12" y="239.5" ></text>
</g>
<g >
<title>do_exit (2 samples, 1.04%)</title><rect x="987.2" y="309" width="12.3" height="15.0" fill="rgb(213,202,6)" rx="2" ry="2" />
<text  x="990.19" y="319.5" ></text>
</g>
<g >
<title>orc::RleDecoderV2::nextShortRepeats (4 samples, 2.08%)</title><rect x="495.5" y="357" width="24.6" height="15.0" fill="rgb(251,209,33)" rx="2" ry="2" />
<text  x="498.52" y="367.5" >o..</text>
</g>
<g >
<title>vma_merge (1 samples, 0.52%)</title><rect x="434.1" y="277" width="6.1" height="15.0" fill="rgb(214,70,7)" rx="2" ry="2" />
<text  x="437.06" y="287.5" ></text>
</g>
<g >
<title>__lock_text_start (2 samples, 1.04%)</title><rect x="962.6" y="149" width="12.3" height="15.0" fill="rgb(245,86,39)" rx="2" ry="2" />
<text  x="965.60" y="159.5" ></text>
</g>
<g >
<title>ksys_pread64 (1 samples, 0.52%)</title><rect x="440.2" y="245" width="6.2" height="15.0" fill="rgb(250,67,11)" rx="2" ry="2" />
<text  x="443.21" y="255.5" ></text>
</g>
<g >
<title>pagecache_get_page (1 samples, 0.52%)</title><rect x="974.9" y="197" width="6.1" height="15.0" fill="rgb(239,138,33)" rx="2" ry="2" />
<text  x="977.90" y="207.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.52%)</title><rect x="348.0" y="277" width="6.2" height="15.0" fill="rgb(249,188,12)" rx="2" ry="2" />
<text  x="351.02" y="287.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.52%)</title><rect x="981.0" y="229" width="6.2" height="15.0" fill="rgb(210,141,37)" rx="2" ry="2" />
<text  x="984.04" y="239.5" ></text>
</g>
<g >
<title>mark_page_accessed (2 samples, 1.04%)</title><rect x="962.6" y="197" width="12.3" height="15.0" fill="rgb(234,76,6)" rx="2" ry="2" />
<text  x="965.60" y="207.5" ></text>
</g>
<g >
<title>__libc_pread64 (2 samples, 1.04%)</title><rect x="421.8" y="357" width="12.3" height="15.0" fill="rgb(244,96,41)" rx="2" ry="2" />
<text  x="424.77" y="367.5" ></text>
</g>
<g >
<title>orc::StringDictionaryColumnReader::next (15 samples, 7.81%)</title><rect x="790.5" y="309" width="92.2" height="15.0" fill="rgb(248,136,18)" rx="2" ry="2" />
<text  x="793.52" y="319.5" >orc::String..</text>
</g>
<g >
<title>__do_page_fault (39 samples, 20.31%)</title><rect x="108.3" y="309" width="239.7" height="15.0" fill="rgb(216,40,36)" rx="2" ry="2" />
<text  x="111.33" y="319.5" >__do_page_fault</text>
</g>
<g >
<title>__vfs_read (13 samples, 6.77%)</title><rect x="901.1" y="277" width="79.9" height="15.0" fill="rgb(224,223,2)" rx="2" ry="2" />
<text  x="904.15" y="287.5" >__vfs_read</text>
</g>
<g >
<title>__lru_cache_add (1 samples, 0.52%)</title><rect x="415.6" y="197" width="6.2" height="15.0" fill="rgb(225,88,21)" rx="2" ry="2" />
<text  x="418.62" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.52%)</title><rect x="882.7" y="293" width="6.2" height="15.0" fill="rgb(241,32,45)" rx="2" ry="2" />
<text  x="885.71" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (13 samples, 6.77%)</title><rect x="901.1" y="325" width="79.9" height="15.0" fill="rgb(212,102,25)" rx="2" ry="2" />
<text  x="904.15" y="335.5" >__x64_sys..</text>
</g>
<g >
<title>do_async_page_fault (39 samples, 20.31%)</title><rect x="108.3" y="341" width="239.7" height="15.0" fill="rgb(246,180,53)" rx="2" ry="2" />
<text  x="111.33" y="351.5" >do_async_page_fault</text>
</g>
<g >
<title>_raw_spin_lock (4 samples, 2.08%)</title><rect x="231.2" y="245" width="24.6" height="15.0" fill="rgb(253,97,23)" rx="2" ry="2" />
<text  x="234.25" y="255.5" >_..</text>
</g>
<g >
<title>[libc-2.31.so] (11 samples, 5.73%)</title><rect x="354.2" y="357" width="67.6" height="15.0" fill="rgb(221,180,33)" rx="2" ry="2" />
<text  x="357.17" y="367.5" >[libc-2..</text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 1.56%)</title><rect x="403.3" y="245" width="18.5" height="15.0" fill="rgb(236,29,41)" rx="2" ry="2" />
<text  x="406.33" y="255.5" ></text>
</g>
<g >
<title>do_brk_flags (1 samples, 0.52%)</title><rect x="434.1" y="293" width="6.1" height="15.0" fill="rgb(217,135,36)" rx="2" ry="2" />
<text  x="437.06" y="303.5" ></text>
</g>
<g >
<title>[ld-2.31.so] (1 samples, 0.52%)</title><rect x="348.0" y="357" width="6.2" height="15.0" fill="rgb(220,140,36)" rx="2" ry="2" />
<text  x="351.02" y="367.5" ></text>
</g>
<g >
<title>google::protobuf::internal::WireFormatLite::ReadMessage (1 samples, 0.52%)</title><rect x="895.0" y="133" width="6.1" height="15.0" fill="rgb(246,183,2)" rx="2" ry="2" />
<text  x="898.00" y="143.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.52%)</title><rect x="882.7" y="341" width="6.2" height="15.0" fill="rgb(221,31,43)" rx="2" ry="2" />
<text  x="885.71" y="351.5" ></text>
</g>
<g >
<title>new_sync_read (2 samples, 1.04%)</title><rect x="421.8" y="245" width="12.3" height="15.0" fill="rgb(249,136,18)" rx="2" ry="2" />
<text  x="424.77" y="255.5" ></text>
</g>
<g >
<title>generic_file_read_iter (13 samples, 6.77%)</title><rect x="901.1" y="229" width="79.9" height="15.0" fill="rgb(226,65,35)" rx="2" ry="2" />
<text  x="904.15" y="239.5" >generic_f..</text>
</g>
<g >
<title>do_page_fault (39 samples, 20.31%)</title><rect x="108.3" y="325" width="239.7" height="15.0" fill="rgb(222,190,9)" rx="2" ry="2" />
<text  x="111.33" y="335.5" >do_page_fault</text>
</g>
<g >
<title>google::protobuf::internal::FunctionClosure0::Run (1 samples, 0.52%)</title><rect x="895.0" y="261" width="6.1" height="15.0" fill="rgb(236,45,43)" rx="2" ry="2" />
<text  x="898.00" y="271.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.52%)</title><rect x="882.7" y="149" width="6.2" height="15.0" fill="rgb(213,106,32)" rx="2" ry="2" />
<text  x="885.71" y="159.5" ></text>
</g>
<g >
<title>do_wp_page (1 samples, 0.52%)</title><rect x="348.0" y="197" width="6.2" height="15.0" fill="rgb(240,71,42)" rx="2" ry="2" />
<text  x="351.02" y="207.5" ></text>
</g>
<g >
<title>orc::RowReaderImpl::next (1 samples, 0.52%)</title><rect x="1183.9" y="373" width="6.1" height="15.0" fill="rgb(235,66,12)" rx="2" ry="2" />
<text  x="1186.85" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::pair&lt;void const*, int&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::pair&lt;void const*, int&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::pair&lt;void const*, int&gt; &gt; &gt; &gt;::_S_key (1 samples, 0.52%)</title><rect x="888.9" y="213" width="6.1" height="15.0" fill="rgb(205,13,39)" rx="2" ry="2" />
<text  x="891.85" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.52%)</title><rect x="981.0" y="357" width="6.2" height="15.0" fill="rgb(219,161,17)" rx="2" ry="2" />
<text  x="984.04" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::pair&lt;void const*, int&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::pair&lt;void const*, int&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::pair&lt;void const*, int&gt; &gt; &gt; &gt;::upper_bound (1 samples, 0.52%)</title><rect x="888.9" y="229" width="6.1" height="15.0" fill="rgb(220,122,21)" rx="2" ry="2" />
<text  x="891.85" y="239.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (2 samples, 1.04%)</title><rect x="987.2" y="213" width="12.3" height="15.0" fill="rgb(251,129,37)" rx="2" ry="2" />
<text  x="990.19" y="223.5" ></text>
</g>
<g >
<title>google::protobuf::MessageLite::ParseFromArray (1 samples, 0.52%)</title><rect x="895.0" y="197" width="6.1" height="15.0" fill="rgb(245,100,30)" rx="2" ry="2" />
<text  x="898.00" y="207.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (1 samples, 0.52%)</title><rect x="415.6" y="181" width="6.2" height="15.0" fill="rgb(225,24,4)" rx="2" ry="2" />
<text  x="418.62" y="191.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.52%)</title><rect x="348.0" y="213" width="6.2" height="15.0" fill="rgb(221,161,51)" rx="2" ry="2" />
<text  x="351.02" y="223.5" ></text>
</g>
<g >
<title>unmap_vmas (2 samples, 1.04%)</title><rect x="987.2" y="261" width="12.3" height="15.0" fill="rgb(241,48,2)" rx="2" ry="2" />
<text  x="990.19" y="271.5" ></text>
</g>
<g >
<title>__do_page_fault (4 samples, 2.08%)</title><rect x="397.2" y="293" width="24.6" height="15.0" fill="rgb(244,8,46)" rx="2" ry="2" />
<text  x="400.19" y="303.5" >_..</text>
</g>
<g >
<title>protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptorsImpl (1 samples, 0.52%)</title><rect x="895.0" y="245" width="6.1" height="15.0" fill="rgb(241,65,15)" rx="2" ry="2" />
<text  x="898.00" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 1.04%)</title><rect x="421.8" y="341" width="12.3" height="15.0" fill="rgb(213,51,52)" rx="2" ry="2" />
<text  x="424.77" y="351.5" ></text>
</g>
<g >
<title>orc::RleDecoderV2::next (5 samples, 2.60%)</title><rect x="446.4" y="357" width="30.7" height="15.0" fill="rgb(237,70,31)" rx="2" ry="2" />
<text  x="449.35" y="367.5" >or..</text>
</g>
<g >
<title>try_charge (2 samples, 1.04%)</title><rect x="335.7" y="197" width="12.3" height="15.0" fill="rgb(254,189,1)" rx="2" ry="2" />
<text  x="338.73" y="207.5" ></text>
</g>
<g >
<title>vfs_read (2 samples, 1.04%)</title><rect x="421.8" y="277" width="12.3" height="15.0" fill="rgb(225,127,30)" rx="2" ry="2" />
<text  x="424.77" y="287.5" ></text>
</g>
<g >
<title>orc::RleDecoderV2::readLongs (1 samples, 0.52%)</title><rect x="1140.8" y="373" width="6.2" height="15.0" fill="rgb(215,164,19)" rx="2" ry="2" />
<text  x="1143.83" y="383.5" ></text>
</g>
<g >
<title>ksys_pread64 (13 samples, 6.77%)</title><rect x="901.1" y="309" width="79.9" height="15.0" fill="rgb(205,20,48)" rx="2" ry="2" />
<text  x="904.15" y="319.5" >ksys_prea..</text>
</g>
<g >
<title>do_anonymous_page (1 samples, 0.52%)</title><rect x="415.6" y="229" width="6.2" height="15.0" fill="rgb(235,34,42)" rx="2" ry="2" />
<text  x="418.62" y="239.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (2 samples, 1.04%)</title><rect x="962.6" y="165" width="12.3" height="15.0" fill="rgb(231,198,4)" rx="2" ry="2" />
<text  x="965.60" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_brk (1 samples, 0.52%)</title><rect x="434.1" y="309" width="6.1" height="15.0" fill="rgb(227,208,22)" rx="2" ry="2" />
<text  x="437.06" y="319.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I_descriptor.pb.cc (1 samples, 0.52%)</title><rect x="895.0" y="357" width="6.1" height="15.0" fill="rgb(238,126,33)" rx="2" ry="2" />
<text  x="898.00" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 1.04%)</title><rect x="987.2" y="357" width="12.3" height="15.0" fill="rgb(217,156,17)" rx="2" ry="2" />
<text  x="990.19" y="367.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (7 samples, 3.65%)</title><rect x="919.6" y="181" width="43.0" height="15.0" fill="rgb(252,98,39)" rx="2" ry="2" />
<text  x="922.58" y="191.5" >copy..</text>
</g>
<g >
<title>orc::RleDecoderV2::readLongBE (1 samples, 0.52%)</title><rect x="520.1" y="357" width="6.1" height="15.0" fill="rgb(213,138,5)" rx="2" ry="2" />
<text  x="523.10" y="367.5" ></text>
</g>
<g >
<title>orc-scan (192 samples, 100.00%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(245,22,26)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >orc-scan</text>
</g>
<g >
<title>new_sync_read (1 samples, 0.52%)</title><rect x="440.2" y="197" width="6.2" height="15.0" fill="rgb(224,2,2)" rx="2" ry="2" />
<text  x="443.21" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.52%)</title><rect x="440.2" y="277" width="6.2" height="15.0" fill="rgb(243,169,26)" rx="2" ry="2" />
<text  x="443.21" y="287.5" ></text>
</g>
<g >
<title>google::protobuf::EncodedDescriptorDatabase::Add (1 samples, 0.52%)</title><rect x="895.0" y="213" width="6.1" height="15.0" fill="rgb(224,219,8)" rx="2" ry="2" />
<text  x="898.00" y="223.5" ></text>
</g>
<g >
<title>__handle_mm_fault (19 samples, 9.90%)</title><rect x="231.2" y="261" width="116.8" height="15.0" fill="rgb(236,33,43)" rx="2" ry="2" />
<text  x="234.25" y="271.5" >__handle_mm_fa..</text>
</g>
<g >
<title>google::protobuf::internal::WireFormatLite::ReadMessage (1 samples, 0.52%)</title><rect x="895.0" y="165" width="6.1" height="15.0" fill="rgb(227,31,42)" rx="2" ry="2" />
<text  x="898.00" y="175.5" ></text>
</g>
<g >
<title>__libc_pread64 (13 samples, 6.77%)</title><rect x="901.1" y="373" width="79.9" height="15.0" fill="rgb(227,3,18)" rx="2" ry="2" />
<text  x="904.15" y="383.5" >__libc_pr..</text>
</g>
<g >
<title>brk (1 samples, 0.52%)</title><rect x="434.1" y="357" width="6.1" height="15.0" fill="rgb(242,96,51)" rx="2" ry="2" />
<text  x="437.06" y="367.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (2 samples, 1.04%)</title><rect x="987.2" y="341" width="12.3" height="15.0" fill="rgb(242,96,34)" rx="2" ry="2" />
<text  x="990.19" y="351.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.52%)</title><rect x="981.0" y="261" width="6.2" height="15.0" fill="rgb(214,172,45)" rx="2" ry="2" />
<text  x="984.04" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.52%)</title><rect x="434.1" y="325" width="6.1" height="15.0" fill="rgb(228,70,13)" rx="2" ry="2" />
<text  x="437.06" y="335.5" ></text>
</g>
<g >
<title>__vfs_read (1 samples, 0.52%)</title><rect x="440.2" y="213" width="6.2" height="15.0" fill="rgb(217,96,43)" rx="2" ry="2" />
<text  x="443.21" y="223.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.52%)</title><rect x="993.3" y="165" width="6.2" height="15.0" fill="rgb(224,189,18)" rx="2" ry="2" />
<text  x="996.33" y="175.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (1 samples, 0.52%)</title><rect x="440.2" y="117" width="6.2" height="15.0" fill="rgb(243,111,40)" rx="2" ry="2" />
<text  x="443.21" y="127.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.52%)</title><rect x="882.7" y="197" width="6.2" height="15.0" fill="rgb(245,140,7)" rx="2" ry="2" />
<text  x="885.71" y="207.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (13 samples, 6.77%)</title><rect x="901.1" y="245" width="79.9" height="15.0" fill="rgb(234,79,29)" rx="2" ry="2" />
<text  x="904.15" y="255.5" >ext4_file..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 1.04%)</title><rect x="987.2" y="373" width="12.3" height="15.0" fill="rgb(219,17,7)" rx="2" ry="2" />
<text  x="990.19" y="383.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.52%)</title><rect x="415.6" y="165" width="6.2" height="15.0" fill="rgb(207,190,5)" rx="2" ry="2" />
<text  x="418.62" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_lock (2 samples, 1.04%)</title><rect x="403.3" y="229" width="12.3" height="15.0" fill="rgb(240,28,49)" rx="2" ry="2" />
<text  x="406.33" y="239.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (2 samples, 1.04%)</title><rect x="421.8" y="197" width="12.3" height="15.0" fill="rgb(213,190,38)" rx="2" ry="2" />
<text  x="424.77" y="207.5" ></text>
</g>
<g >
<title>get_vma_policy.part.0 (1 samples, 0.52%)</title><rect x="262.0" y="213" width="6.1" height="15.0" fill="rgb(225,219,10)" rx="2" ry="2" />
<text  x="264.98" y="223.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (11 samples, 5.73%)</title><rect x="280.4" y="229" width="67.6" height="15.0" fill="rgb(225,117,9)" rx="2" ry="2" />
<text  x="283.42" y="239.5" >mem_cgr..</text>
</g>
<g >
<title>ext4_file_read_iter (2 samples, 1.04%)</title><rect x="421.8" y="229" width="12.3" height="15.0" fill="rgb(244,16,35)" rx="2" ry="2" />
<text  x="424.77" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.52%)</title><rect x="981.0" y="341" width="6.2" height="15.0" fill="rgb(212,95,47)" rx="2" ry="2" />
<text  x="984.04" y="351.5" ></text>
</g>
<g >
<title>exit_mmap (2 samples, 1.04%)</title><rect x="987.2" y="277" width="12.3" height="15.0" fill="rgb(207,98,1)" rx="2" ry="2" />
<text  x="990.19" y="287.5" ></text>
</g>
<g >
<title>[ld-2.31.so] (1 samples, 0.52%)</title><rect x="348.0" y="325" width="6.2" height="15.0" fill="rgb(224,205,31)" rx="2" ry="2" />
<text  x="351.02" y="335.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.52%)</title><rect x="882.7" y="181" width="6.2" height="15.0" fill="rgb(249,10,35)" rx="2" ry="2" />
<text  x="885.71" y="191.5" ></text>
</g>
<g >
<title>async_page_fault (1 samples, 0.52%)</title><rect x="348.0" y="309" width="6.2" height="15.0" fill="rgb(205,93,40)" rx="2" ry="2" />
<text  x="351.02" y="319.5" ></text>
</g>
<g >
<title>orc::BooleanRleDecoderImpl::~BooleanRleDecoderImpl (1 samples, 0.52%)</title><rect x="440.2" y="357" width="6.2" height="15.0" fill="rgb(231,71,25)" rx="2" ry="2" />
<text  x="443.21" y="367.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (1 samples, 0.52%)</title><rect x="440.2" y="261" width="6.2" height="15.0" fill="rgb(236,95,22)" rx="2" ry="2" />
<text  x="443.21" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.52%)</title><rect x="882.7" y="309" width="6.2" height="15.0" fill="rgb(219,100,20)" rx="2" ry="2" />
<text  x="885.71" y="319.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::~ctype (1 samples, 0.52%)</title><rect x="882.7" y="357" width="6.2" height="15.0" fill="rgb(234,4,32)" rx="2" ry="2" />
<text  x="885.71" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 1.04%)</title><rect x="421.8" y="325" width="12.3" height="15.0" fill="rgb(253,229,7)" rx="2" ry="2" />
<text  x="424.77" y="335.5" ></text>
</g>
<g >
<title>google::protobuf::io::as_string_data (1 samples, 0.52%)</title><rect x="895.0" y="69" width="6.1" height="15.0" fill="rgb(205,184,45)" rx="2" ry="2" />
<text  x="898.00" y="79.5" ></text>
</g>
<g >
<title>std::make_pair&lt;char*&amp;, bool&gt; (1 samples, 0.52%)</title><rect x="895.0" y="53" width="6.1" height="15.0" fill="rgb(217,44,21)" rx="2" ry="2" />
<text  x="898.00" y="63.5" ></text>
</g>
<g >
<title>__cxx_global_var_init.2 (1 samples, 0.52%)</title><rect x="895.0" y="341" width="6.1" height="15.0" fill="rgb(210,17,31)" rx="2" ry="2" />
<text  x="898.00" y="351.5" ></text>
</g>
<g >
<title>google::protobuf::SimpleDescriptorDatabase::DescriptorIndex&lt;std::pair&lt;void const*, int&gt; &gt;::AddSymbol (1 samples, 0.52%)</title><rect x="888.9" y="277" width="6.1" height="15.0" fill="rgb(228,9,49)" rx="2" ry="2" />
<text  x="891.85" y="287.5" ></text>
</g>
<g >
<title>do_group_exit (2 samples, 1.04%)</title><rect x="987.2" y="325" width="12.3" height="15.0" fill="rgb(235,84,3)" rx="2" ry="2" />
<text  x="990.19" y="335.5" ></text>
</g>
<g >
<title>[ld-2.31.so] (1 samples, 0.52%)</title><rect x="348.0" y="341" width="6.2" height="15.0" fill="rgb(220,5,38)" rx="2" ry="2" />
<text  x="351.02" y="351.5" ></text>
</g>
<g >
<title>handle_mm_fault (3 samples, 1.56%)</title><rect x="403.3" y="261" width="18.5" height="15.0" fill="rgb(238,185,44)" rx="2" ry="2" />
<text  x="406.33" y="271.5" ></text>
</g>
<g >
<title>rmqueue (1 samples, 0.52%)</title><rect x="255.8" y="181" width="6.2" height="15.0" fill="rgb(218,50,28)" rx="2" ry="2" />
<text  x="258.83" y="191.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.52%)</title><rect x="993.3" y="181" width="6.2" height="15.0" fill="rgb(237,116,36)" rx="2" ry="2" />
<text  x="996.33" y="191.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.52%)</title><rect x="348.0" y="261" width="6.2" height="15.0" fill="rgb(237,186,15)" rx="2" ry="2" />
<text  x="351.02" y="271.5" ></text>
</g>
<g >
<title>find_get_entry (1 samples, 0.52%)</title><rect x="974.9" y="181" width="6.1" height="15.0" fill="rgb(248,113,26)" rx="2" ry="2" />
<text  x="977.90" y="191.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.52%)</title><rect x="348.0" y="245" width="6.2" height="15.0" fill="rgb(226,116,54)" rx="2" ry="2" />
<text  x="351.02" y="255.5" ></text>
</g>
<g >
<title>google::protobuf::EncodedDescriptorDatabase::Add (1 samples, 0.52%)</title><rect x="888.9" y="309" width="6.1" height="15.0" fill="rgb(216,130,16)" rx="2" ry="2" />
<text  x="891.85" y="319.5" ></text>
</g>
<g >
<title>[unknown] (17 samples, 8.85%)</title><rect x="778.2" y="325" width="104.5" height="15.0" fill="rgb(252,92,8)" rx="2" ry="2" />
<text  x="781.23" y="335.5" >[unknown]</text>
</g>
<g >
<title>orc::RleDecoderV2::unrolledUnpack16 (7 samples, 3.65%)</title><rect x="526.2" y="357" width="43.1" height="15.0" fill="rgb(250,41,15)" rx="2" ry="2" />
<text  x="529.25" y="367.5" >orc:..</text>
</g>
<g >
<title>google::protobuf::DescriptorProto::MergePartialFromCodedStream (1 samples, 0.52%)</title><rect x="895.0" y="149" width="6.1" height="15.0" fill="rgb(215,121,34)" rx="2" ry="2" />
<text  x="898.00" y="159.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.52%)</title><rect x="255.8" y="197" width="6.2" height="15.0" fill="rgb(212,90,39)" rx="2" ry="2" />
<text  x="258.83" y="207.5" ></text>
</g>
<g >
<title>vfs_read (13 samples, 6.77%)</title><rect x="901.1" y="293" width="79.9" height="15.0" fill="rgb(222,86,8)" rx="2" ry="2" />
<text  x="904.15" y="303.5" >vfs_read</text>
</g>
<g >
<title>google::protobuf::DescriptorPool::InternalAddGeneratedFile (1 samples, 0.52%)</title><rect x="888.9" y="325" width="6.1" height="15.0" fill="rgb(254,186,49)" rx="2" ry="2" />
<text  x="891.85" y="335.5" ></text>
</g>
<g >
<title>__do_munmap (1 samples, 0.52%)</title><rect x="981.0" y="293" width="6.2" height="15.0" fill="rgb(227,69,31)" rx="2" ry="2" />
<text  x="984.04" y="303.5" ></text>
</g>
<g >
<title>unmap_region (1 samples, 0.52%)</title><rect x="882.7" y="229" width="6.2" height="15.0" fill="rgb(236,36,33)" rx="2" ry="2" />
<text  x="885.71" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (13 samples, 6.77%)</title><rect x="901.1" y="341" width="79.9" height="15.0" fill="rgb(247,1,8)" rx="2" ry="2" />
<text  x="904.15" y="351.5" >do_syscal..</text>
</g>
<g >
<title>orc::RleDecoderV2::nextDirect (3 samples, 1.56%)</title><rect x="477.1" y="357" width="18.4" height="15.0" fill="rgb(253,100,36)" rx="2" ry="2" />
<text  x="480.08" y="367.5" ></text>
</g>
<g >
<title>orc::RleDecoderV2::nextDirect (6 samples, 3.12%)</title><rect x="1104.0" y="373" width="36.8" height="15.0" fill="rgb(252,116,49)" rx="2" ry="2" />
<text  x="1106.96" y="383.5" >orc..</text>
</g>
<g >
<title>[unknown] (1 samples, 0.52%)</title><rect x="440.2" y="341" width="6.2" height="15.0" fill="rgb(217,87,21)" rx="2" ry="2" />
<text  x="443.21" y="351.5" ></text>
</g>
<g >
<title>orc::RleDecoderV2::unrolledUnpack24 (3 samples, 1.56%)</title><rect x="1147.0" y="373" width="18.4" height="15.0" fill="rgb(253,171,40)" rx="2" ry="2" />
<text  x="1149.98" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (21 samples, 10.94%)</title><rect x="219.0" y="277" width="129.0" height="15.0" fill="rgb(238,104,41)" rx="2" ry="2" />
<text  x="221.96" y="287.5" >handle_mm_fault</text>
</g>
<g >
<title>__libc_pread64 (1 samples, 0.52%)</title><rect x="440.2" y="309" width="6.2" height="15.0" fill="rgb(241,201,26)" rx="2" ry="2" />
<text  x="443.21" y="319.5" ></text>
</g>
<g >
<title>do_async_page_fault (4 samples, 2.08%)</title><rect x="397.2" y="325" width="24.6" height="15.0" fill="rgb(212,91,13)" rx="2" ry="2" />
<text  x="400.19" y="335.5" >d..</text>
</g>
<g >
<title>__x64_sys_munmap (1 samples, 0.52%)</title><rect x="882.7" y="277" width="6.2" height="15.0" fill="rgb(218,23,32)" rx="2" ry="2" />
<text  x="885.71" y="287.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.52%)</title><rect x="348.0" y="229" width="6.2" height="15.0" fill="rgb(227,219,25)" rx="2" ry="2" />
<text  x="351.02" y="239.5" ></text>
</g>
<g >
<title>protobuf_ClientNamenodeProtocol_2eproto::AddDescriptorsImpl (1 samples, 0.52%)</title><rect x="888.9" y="341" width="6.1" height="15.0" fill="rgb(233,45,25)" rx="2" ry="2" />
<text  x="891.85" y="351.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (1 samples, 0.52%)</title><rect x="415.6" y="213" width="6.2" height="15.0" fill="rgb(252,101,45)" rx="2" ry="2" />
<text  x="418.62" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.52%)</title><rect x="434.1" y="341" width="6.1" height="15.0" fill="rgb(226,41,30)" rx="2" ry="2" />
<text  x="437.06" y="351.5" ></text>
</g>
<g >
<title>generic_file_read_iter (1 samples, 0.52%)</title><rect x="440.2" y="165" width="6.2" height="15.0" fill="rgb(226,99,52)" rx="2" ry="2" />
<text  x="443.21" y="175.5" ></text>
</g>
<g >
<title>orc::StringDictionaryColumnReader::next (34 samples, 17.71%)</title><rect x="569.3" y="357" width="208.9" height="15.0" fill="rgb(219,24,54)" rx="2" ry="2" />
<text  x="572.27" y="367.5" >orc::StringDictionaryColumn..</text>
</g>
<g >
<title>orc::RleDecoderV2::unrolledUnpack8 (3 samples, 1.56%)</title><rect x="1165.4" y="373" width="18.5" height="15.0" fill="rgb(235,51,54)" rx="2" ry="2" />
<text  x="1168.42" y="383.5" ></text>
</g>
<g >
<title>activate_page (2 samples, 1.04%)</title><rect x="962.6" y="181" width="12.3" height="15.0" fill="rgb(205,48,31)" rx="2" ry="2" />
<text  x="965.60" y="191.5" ></text>
</g>
<g >
<title>[unknown] (88 samples, 45.83%)</title><rect x="348.0" y="373" width="540.9" height="15.0" fill="rgb(236,70,6)" rx="2" ry="2" />
<text  x="351.02" y="383.5" >[unknown]</text>
</g>
<g >
<title>do_anonymous_page (15 samples, 7.81%)</title><rect x="255.8" y="245" width="92.2" height="15.0" fill="rgb(241,89,36)" rx="2" ry="2" />
<text  x="258.83" y="255.5" >do_anonymou..</text>
</g>
<g >
<title>protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors (1 samples, 0.52%)</title><rect x="895.0" y="309" width="6.1" height="15.0" fill="rgb(239,181,15)" rx="2" ry="2" />
<text  x="898.00" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (13 samples, 6.77%)</title><rect x="901.1" y="357" width="79.9" height="15.0" fill="rgb(233,131,34)" rx="2" ry="2" />
<text  x="904.15" y="367.5" >entry_SYS..</text>
</g>
<g >
<title>google::protobuf::SimpleDescriptorDatabase::DescriptorIndex&lt;std::pair&lt;void const*, int&gt; &gt;::FindLastLessOrEqual (1 samples, 0.52%)</title><rect x="888.9" y="261" width="6.1" height="15.0" fill="rgb(240,197,30)" rx="2" ry="2" />
<text  x="891.85" y="271.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (1 samples, 0.52%)</title><rect x="440.2" y="149" width="6.2" height="15.0" fill="rgb(219,188,41)" rx="2" ry="2" />
<text  x="443.21" y="159.5" ></text>
</g>
<g >
<title>copy_page_to_iter (7 samples, 3.65%)</title><rect x="919.6" y="197" width="43.0" height="15.0" fill="rgb(241,114,42)" rx="2" ry="2" />
<text  x="922.58" y="207.5" >copy..</text>
</g>
<g >
<title>page_counter_try_charge (1 samples, 0.52%)</title><rect x="341.9" y="181" width="6.1" height="15.0" fill="rgb(232,201,36)" rx="2" ry="2" />
<text  x="344.88" y="191.5" ></text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (2 samples, 1.04%)</title><rect x="280.4" y="213" width="12.3" height="15.0" fill="rgb(224,45,1)" rx="2" ry="2" />
<text  x="283.42" y="223.5" ></text>
</g>
<g >
<title>__vma_adjust (1 samples, 0.52%)</title><rect x="434.1" y="261" width="6.1" height="15.0" fill="rgb(254,104,28)" rx="2" ry="2" />
<text  x="437.06" y="271.5" ></text>
</g>
<g >
<title>google::protobuf::internal::WireFormatLite::ReadString (1 samples, 0.52%)</title><rect x="895.0" y="101" width="6.1" height="15.0" fill="rgb(232,160,38)" rx="2" ry="2" />
<text  x="898.00" y="111.5" ></text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (1 samples, 0.52%)</title><rect x="274.3" y="229" width="6.1" height="15.0" fill="rgb(247,25,25)" rx="2" ry="2" />
<text  x="277.27" y="239.5" ></text>
</g>
<g >
<title>__vm_munmap (1 samples, 0.52%)</title><rect x="981.0" y="309" width="6.2" height="15.0" fill="rgb(235,73,18)" rx="2" ry="2" />
<text  x="984.04" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.52%)</title><rect x="440.2" y="293" width="6.2" height="15.0" fill="rgb(247,138,40)" rx="2" ry="2" />
<text  x="443.21" y="303.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;void const*, int&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::pair&lt;void const*, int&gt; &gt; &gt; &gt;::upper_bound (1 samples, 0.52%)</title><rect x="888.9" y="245" width="6.1" height="15.0" fill="rgb(229,51,43)" rx="2" ry="2" />
<text  x="891.85" y="255.5" ></text>
</g>
<g >
<title>ksys_pread64 (2 samples, 1.04%)</title><rect x="421.8" y="293" width="12.3" height="15.0" fill="rgb(242,7,27)" rx="2" ry="2" />
<text  x="424.77" y="303.5" ></text>
</g>
<g >
<title>[unknown] (17 samples, 8.85%)</title><rect x="778.2" y="341" width="104.5" height="15.0" fill="rgb(214,83,12)" rx="2" ry="2" />
<text  x="781.23" y="351.5" >[unknown]</text>
</g>
<g >
<title>do_page_fault (4 samples, 2.08%)</title><rect x="397.2" y="309" width="24.6" height="15.0" fill="rgb(223,115,33)" rx="2" ry="2" />
<text  x="400.19" y="319.5" >d..</text>
</g>
<g >
<title>google::protobuf::FieldDescriptorProto::MergePartialFromCodedStream (1 samples, 0.52%)</title><rect x="895.0" y="117" width="6.1" height="15.0" fill="rgb(220,162,7)" rx="2" ry="2" />
<text  x="898.00" y="127.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (2 samples, 1.04%)</title><rect x="421.8" y="165" width="12.3" height="15.0" fill="rgb(207,28,49)" rx="2" ry="2" />
<text  x="424.77" y="175.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (13 samples, 6.77%)</title><rect x="901.1" y="213" width="79.9" height="15.0" fill="rgb(211,138,33)" rx="2" ry="2" />
<text  x="904.15" y="223.5" >generic_f..</text>
</g>
<g >
<title>__munmap (1 samples, 0.52%)</title><rect x="981.0" y="373" width="6.2" height="15.0" fill="rgb(224,62,2)" rx="2" ry="2" />
<text  x="984.04" y="383.5" ></text>
</g>
<g >
<title>google::protobuf::DescriptorPool::InternalAddGeneratedFile (1 samples, 0.52%)</title><rect x="895.0" y="229" width="6.1" height="15.0" fill="rgb(215,56,47)" rx="2" ry="2" />
<text  x="898.00" y="239.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 1.04%)</title><rect x="778.2" y="309" width="12.3" height="15.0" fill="rgb(221,217,44)" rx="2" ry="2" />
<text  x="781.23" y="319.5" ></text>
</g>
<g >
<title>kthread_blkcg (2 samples, 1.04%)</title><rect x="280.4" y="197" width="12.3" height="15.0" fill="rgb(223,59,19)" rx="2" ry="2" />
<text  x="283.42" y="207.5" ></text>
</g>
<g >
<title>__vfs_read (2 samples, 1.04%)</title><rect x="421.8" y="261" width="12.3" height="15.0" fill="rgb(237,187,16)" rx="2" ry="2" />
<text  x="424.77" y="271.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.52%)</title><rect x="440.2" y="325" width="6.2" height="15.0" fill="rgb(212,163,13)" rx="2" ry="2" />
<text  x="443.21" y="335.5" ></text>
</g>
<g >
<title>protobuf_google_2fprotobuf_2fdescriptor_2eproto::StaticDescriptorInitializer::StaticDescriptorInitializer (1 samples, 0.52%)</title><rect x="895.0" y="325" width="6.1" height="15.0" fill="rgb(234,136,0)" rx="2" ry="2" />
<text  x="898.00" y="335.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (55 samples, 28.65%)</title><rect x="10.0" y="373" width="338.0" height="15.0" fill="rgb(218,217,3)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >[libc-2.31.so]</text>
</g>
<g >
<title>__x64_sys_pread64 (2 samples, 1.04%)</title><rect x="421.8" y="309" width="12.3" height="15.0" fill="rgb(220,52,8)" rx="2" ry="2" />
<text  x="424.77" y="319.5" ></text>
</g>
<g >
<title>unmap_region (1 samples, 0.52%)</title><rect x="981.0" y="277" width="6.2" height="15.0" fill="rgb(229,65,9)" rx="2" ry="2" />
<text  x="984.04" y="287.5" ></text>
</g>
<g >
<title>get_task_policy.part.0 (1 samples, 0.52%)</title><rect x="262.0" y="197" width="6.1" height="15.0" fill="rgb(223,1,1)" rx="2" ry="2" />
<text  x="264.98" y="207.5" ></text>
</g>
<g >
<title>google::protobuf::SimpleDescriptorDatabase::DescriptorIndex&lt;std::pair&lt;void const*, int&gt; &gt;::AddFile (1 samples, 0.52%)</title><rect x="888.9" y="293" width="6.1" height="15.0" fill="rgb(226,51,36)" rx="2" ry="2" />
<text  x="891.85" y="303.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (9 samples, 4.69%)</title><rect x="292.7" y="213" width="55.3" height="15.0" fill="rgb(233,34,51)" rx="2" ry="2" />
<text  x="295.71" y="223.5" >mem_c..</text>
</g>
<g >
<title>google::protobuf::FileDescriptorProto::MergePartialFromCodedStream (1 samples, 0.52%)</title><rect x="895.0" y="181" width="6.1" height="15.0" fill="rgb(209,147,33)" rx="2" ry="2" />
<text  x="898.00" y="191.5" ></text>
</g>
</g>
</svg>
