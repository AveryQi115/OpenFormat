<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="502.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="485" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="485" > </text>
<g id="frames">
<g >
<title>do_exit (1 samples, 0.52%)</title><rect x="10.0" y="325" width="6.1" height="15.0" fill="rgb(226,170,13)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>pagecache_get_page (1 samples, 0.52%)</title><rect x="825.1" y="245" width="6.0" height="15.0" fill="rgb(232,73,21)" rx="2" ry="2" />
<text  x="828.05" y="255.5" ></text>
</g>
<g >
<title>do_async_page_fault (1 samples, 0.52%)</title><rect x="259.4" y="341" width="6.1" height="15.0" fill="rgb(220,41,40)" rx="2" ry="2" />
<text  x="262.38" y="351.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.52%)</title><rect x="265.5" y="261" width="6.0" height="15.0" fill="rgb(237,40,30)" rx="2" ry="2" />
<text  x="268.46" y="271.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (1 samples, 0.52%)</title><rect x="1183.9" y="421" width="6.1" height="15.0" fill="rgb(236,177,48)" rx="2" ry="2" />
<text  x="1186.92" y="431.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.52%)</title><rect x="265.5" y="277" width="6.0" height="15.0" fill="rgb(230,25,1)" rx="2" ry="2" />
<text  x="268.46" y="287.5" ></text>
</g>
<g >
<title>do_user_addr_fault (7 samples, 3.61%)</title><rect x="1117.0" y="341" width="42.6" height="15.0" fill="rgb(207,9,40)" rx="2" ry="2" />
<text  x="1120.01" y="351.5" >do_u..</text>
</g>
<g >
<title>get_page_from_freelist (3 samples, 1.55%)</title><rect x="198.6" y="245" width="18.2" height="15.0" fill="rgb(207,226,19)" rx="2" ry="2" />
<text  x="201.56" y="255.5" ></text>
</g>
<g >
<title>__lru_cache_add (1 samples, 0.52%)</title><rect x="1147.4" y="261" width="6.1" height="15.0" fill="rgb(222,98,15)" rx="2" ry="2" />
<text  x="1150.42" y="271.5" ></text>
</g>
<g >
<title>mark_page_accessed (4 samples, 2.06%)</title><rect x="800.7" y="245" width="24.4" height="15.0" fill="rgb(212,43,2)" rx="2" ry="2" />
<text  x="803.72" y="255.5" >m..</text>
</g>
<g >
<title>do_signal (1 samples, 0.52%)</title><rect x="10.0" y="373" width="6.1" height="15.0" fill="rgb(226,15,25)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>ehooks_default_dalloc (6 samples, 3.09%)</title><rect x="283.7" y="405" width="36.5" height="15.0" fill="rgb(233,56,33)" rx="2" ry="2" />
<text  x="286.71" y="415.5" >eho..</text>
</g>
<g >
<title>[unknown] (52 samples, 26.80%)</title><rect x="235.1" y="421" width="316.2" height="15.0" fill="rgb(217,140,50)" rx="2" ry="2" />
<text  x="238.05" y="431.5" >[unknown]</text>
</g>
<g >
<title>release_pages (4 samples, 2.06%)</title><rect x="283.7" y="245" width="24.3" height="15.0" fill="rgb(225,203,37)" rx="2" ry="2" />
<text  x="286.71" y="255.5" >r..</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.52%)</title><rect x="113.4" y="309" width="6.1" height="15.0" fill="rgb(240,123,19)" rx="2" ry="2" />
<text  x="116.40" y="319.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (4 samples, 2.06%)</title><rect x="715.6" y="69" width="24.3" height="15.0" fill="rgb(209,139,8)" rx="2" ry="2" />
<text  x="718.57" y="79.5" >_..</text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (10 samples, 5.15%)</title><rect x="739.9" y="85" width="60.8" height="15.0" fill="rgb(223,57,7)" rx="2" ry="2" />
<text  x="742.90" y="95.5" >mem_cg..</text>
</g>
<g >
<title>handle_mm_fault (18 samples, 9.28%)</title><rect x="691.2" y="133" width="109.5" height="15.0" fill="rgb(244,133,7)" rx="2" ry="2" />
<text  x="694.24" y="143.5" >handle_mm_fault</text>
</g>
<g >
<title>exit_mmap (1 samples, 0.52%)</title><rect x="10.0" y="293" width="6.1" height="15.0" fill="rgb(243,223,43)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>do_page_fault (26 samples, 13.40%)</title><rect x="642.6" y="181" width="158.1" height="15.0" fill="rgb(231,98,28)" rx="2" ry="2" />
<text  x="645.58" y="191.5" >do_page_fault</text>
</g>
<g >
<title>arrow::internal::unpack7_32 (1 samples, 0.52%)</title><rect x="898.0" y="421" width="6.1" height="15.0" fill="rgb(205,136,36)" rx="2" ry="2" />
<text  x="901.04" y="431.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.52%)</title><rect x="113.4" y="341" width="6.1" height="15.0" fill="rgb(223,57,6)" rx="2" ry="2" />
<text  x="116.40" y="351.5" ></text>
</g>
<g >
<title>__vfs_read (46 samples, 23.71%)</title><rect x="551.3" y="325" width="279.8" height="15.0" fill="rgb(207,81,37)" rx="2" ry="2" />
<text  x="554.34" y="335.5" >__vfs_read</text>
</g>
<g >
<title>ext4_file_read_iter (46 samples, 23.71%)</title><rect x="551.3" y="293" width="279.8" height="15.0" fill="rgb(247,40,51)" rx="2" ry="2" />
<text  x="554.34" y="303.5" >ext4_file_read_iter</text>
</g>
<g >
<title>free_pages_and_swap_cache (4 samples, 2.06%)</title><rect x="283.7" y="261" width="24.3" height="15.0" fill="rgb(252,53,8)" rx="2" ry="2" />
<text  x="286.71" y="271.5" >f..</text>
</g>
<g >
<title>unmap_single_vma (2 samples, 1.03%)</title><rect x="308.0" y="293" width="12.2" height="15.0" fill="rgb(245,106,7)" rx="2" ry="2" />
<text  x="311.04" y="303.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (33 samples, 17.01%)</title><rect x="34.3" y="421" width="200.8" height="15.0" fill="rgb(217,96,24)" rx="2" ry="2" />
<text  x="37.33" y="431.5" >[libc-2.31.so]</text>
</g>
<g >
<title>mem_cgroup_try_charge (1 samples, 0.52%)</title><rect x="1153.5" y="261" width="6.1" height="15.0" fill="rgb(237,12,26)" rx="2" ry="2" />
<text  x="1156.51" y="271.5" ></text>
</g>
<g >
<title>__do_page_fault (19 samples, 9.79%)</title><rect x="119.5" y="357" width="115.6" height="15.0" fill="rgb(251,74,5)" rx="2" ry="2" />
<text  x="122.48" y="367.5" >__do_page_fault</text>
</g>
<g >
<title>zap_page_range (6 samples, 3.09%)</title><rect x="283.7" y="309" width="36.5" height="15.0" fill="rgb(232,222,44)" rx="2" ry="2" />
<text  x="286.71" y="319.5" >zap..</text>
</g>
<g >
<title>mmput (1 samples, 0.52%)</title><rect x="10.0" y="309" width="6.1" height="15.0" fill="rgb(231,110,13)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>__do_sys_madvise (6 samples, 3.09%)</title><rect x="283.7" y="325" width="36.5" height="15.0" fill="rgb(218,58,8)" rx="2" ry="2" />
<text  x="286.71" y="335.5" >__d..</text>
</g>
<g >
<title>[ld-2.31.so] (3 samples, 1.55%)</title><rect x="16.1" y="421" width="18.2" height="15.0" fill="rgb(242,137,24)" rx="2" ry="2" />
<text  x="19.08" y="431.5" ></text>
</g>
<g >
<title>parquet::(anonymous namespace)::SerializedPageReader::~SerializedPageReader (1 samples, 0.52%)</title><rect x="320.2" y="405" width="6.1" height="15.0" fill="rgb(224,209,16)" rx="2" ry="2" />
<text  x="323.21" y="415.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.52%)</title><rect x="259.4" y="261" width="6.1" height="15.0" fill="rgb(229,149,29)" rx="2" ry="2" />
<text  x="262.38" y="271.5" ></text>
</g>
<g >
<title>unmap_page_range (2 samples, 1.03%)</title><rect x="308.0" y="277" width="12.2" height="15.0" fill="rgb(241,65,16)" rx="2" ry="2" />
<text  x="311.04" y="287.5" ></text>
</g>
<g >
<title>arrow::io::BufferReader::DoReadAt (1 samples, 0.52%)</title><rect x="320.2" y="373" width="6.1" height="15.0" fill="rgb(225,164,45)" rx="2" ry="2" />
<text  x="323.21" y="383.5" ></text>
</g>
<g >
<title>do_async_page_fault (19 samples, 9.79%)</title><rect x="119.5" y="389" width="115.6" height="15.0" fill="rgb(216,214,5)" rx="2" ry="2" />
<text  x="122.48" y="399.5" >do_async_page_..</text>
</g>
<g >
<title>parquet::(anonymous namespace)::TypedColumnReaderImpl&lt;parquet::PhysicalType&lt; (37 samples, 19.07%)</title><rect x="326.3" y="405" width="225.0" height="15.0" fill="rgb(209,145,50)" rx="2" ry="2" />
<text  x="329.29" y="415.5" >parquet::(anonymous namespace..</text>
</g>
<g >
<title>do_async_page_fault (1 samples, 0.52%)</title><rect x="28.2" y="373" width="6.1" height="15.0" fill="rgb(226,218,21)" rx="2" ry="2" />
<text  x="31.25" y="383.5" ></text>
</g>
<g >
<title>vm_normal_page (1 samples, 0.52%)</title><rect x="314.1" y="245" width="6.1" height="15.0" fill="rgb(228,71,4)" rx="2" ry="2" />
<text  x="317.12" y="255.5" ></text>
</g>
<g >
<title>clear_page_erms (2 samples, 1.03%)</title><rect x="198.6" y="229" width="12.1" height="15.0" fill="rgb(226,89,53)" rx="2" ry="2" />
<text  x="201.56" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (1 samples, 0.52%)</title><rect x="265.5" y="341" width="6.0" height="15.0" fill="rgb(234,75,8)" rx="2" ry="2" />
<text  x="268.46" y="351.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (1 samples, 0.52%)</title><rect x="265.5" y="229" width="6.0" height="15.0" fill="rgb(218,51,34)" rx="2" ry="2" />
<text  x="268.46" y="239.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.52%)</title><rect x="113.4" y="293" width="6.1" height="15.0" fill="rgb(205,196,50)" rx="2" ry="2" />
<text  x="116.40" y="303.5" ></text>
</g>
<g >
<title>unmap_region (1 samples, 0.52%)</title><rect x="265.5" y="293" width="6.0" height="15.0" fill="rgb(220,89,52)" rx="2" ry="2" />
<text  x="268.46" y="303.5" ></text>
</g>
<g >
<title>handle_mm_fault (4 samples, 2.06%)</title><rect x="1135.3" y="325" width="24.3" height="15.0" fill="rgb(207,78,45)" rx="2" ry="2" />
<text  x="1138.26" y="335.5" >h..</text>
</g>
<g >
<title>do_page_fault (1 samples, 0.52%)</title><rect x="28.2" y="357" width="6.1" height="15.0" fill="rgb(208,131,38)" rx="2" ry="2" />
<text  x="31.25" y="367.5" ></text>
</g>
<g >
<title>all (194 samples, 100%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(240,192,18)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (1 samples, 0.52%)</title><rect x="229.0" y="277" width="6.1" height="15.0" fill="rgb(249,7,23)" rx="2" ry="2" />
<text  x="231.97" y="287.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.52%)</title><rect x="28.2" y="341" width="6.1" height="15.0" fill="rgb(221,110,0)" rx="2" ry="2" />
<text  x="31.25" y="351.5" ></text>
</g>
<g >
<title>do_anonymous_page (6 samples, 3.09%)</title><rect x="198.6" y="293" width="36.5" height="15.0" fill="rgb(225,133,36)" rx="2" ry="2" />
<text  x="201.56" y="303.5" >do_..</text>
</g>
<g >
<title>__handle_mm_fault (18 samples, 9.28%)</title><rect x="691.2" y="117" width="109.5" height="15.0" fill="rgb(225,166,10)" rx="2" ry="2" />
<text  x="694.24" y="127.5" >__handle_mm_f..</text>
</g>
<g >
<title>zap_pte_range.isra.0 (2 samples, 1.03%)</title><rect x="308.0" y="261" width="12.2" height="15.0" fill="rgb(226,36,40)" rx="2" ry="2" />
<text  x="311.04" y="271.5" ></text>
</g>
<g >
<title>arrow::util::RleDecoder::GetBatchWithDict&lt;parquet::ByteArray&gt; (1 samples, 0.52%)</title><rect x="277.6" y="405" width="6.1" height="15.0" fill="rgb(208,39,30)" rx="2" ry="2" />
<text  x="280.63" y="415.5" ></text>
</g>
<g >
<title>copy_page_to_iter (38 samples, 19.59%)</title><rect x="569.6" y="245" width="231.1" height="15.0" fill="rgb(222,155,17)" rx="2" ry="2" />
<text  x="572.59" y="255.5" >copy_page_to_iter</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.52%)</title><rect x="10.0" y="405" width="6.1" height="15.0" fill="rgb(223,154,29)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.52%)</title><rect x="113.4" y="325" width="6.1" height="15.0" fill="rgb(220,162,22)" rx="2" ry="2" />
<text  x="116.40" y="335.5" ></text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (2 samples, 1.03%)</title><rect x="739.9" y="69" width="12.2" height="15.0" fill="rgb(252,208,29)" rx="2" ry="2" />
<text  x="742.90" y="79.5" ></text>
</g>
<g >
<title>wp_page_copy (1 samples, 0.52%)</title><rect x="28.2" y="261" width="6.1" height="15.0" fill="rgb(249,88,50)" rx="2" ry="2" />
<text  x="31.25" y="271.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.52%)</title><rect x="10.0" y="261" width="6.1" height="15.0" fill="rgb(250,44,18)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.52%)</title><rect x="10.0" y="213" width="6.1" height="15.0" fill="rgb(249,135,10)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>[libsqlite3.so.0.8.6] (1 samples, 0.52%)</title><rect x="113.4" y="405" width="6.1" height="15.0" fill="rgb(214,176,25)" rx="2" ry="2" />
<text  x="116.40" y="415.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.52%)</title><rect x="28.2" y="309" width="6.1" height="15.0" fill="rgb(254,99,7)" rx="2" ry="2" />
<text  x="31.25" y="319.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.52%)</title><rect x="113.4" y="357" width="6.1" height="15.0" fill="rgb(220,39,47)" rx="2" ry="2" />
<text  x="116.40" y="367.5" ></text>
</g>
<g >
<title>get_page_from_freelist (3 samples, 1.55%)</title><rect x="721.6" y="53" width="18.3" height="15.0" fill="rgb(227,144,26)" rx="2" ry="2" />
<text  x="724.65" y="63.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.52%)</title><rect x="10.0" y="245" width="6.1" height="15.0" fill="rgb(207,161,17)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>find_get_entry (1 samples, 0.52%)</title><rect x="825.1" y="229" width="6.0" height="15.0" fill="rgb(240,86,51)" rx="2" ry="2" />
<text  x="828.05" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (46 samples, 23.71%)</title><rect x="551.3" y="389" width="279.8" height="15.0" fill="rgb(224,66,40)" rx="2" ry="2" />
<text  x="554.34" y="399.5" >do_syscall_64</text>
</g>
<g >
<title>try_charge (2 samples, 1.03%)</title><rect x="788.6" y="53" width="12.1" height="15.0" fill="rgb(216,140,50)" rx="2" ry="2" />
<text  x="791.56" y="63.5" ></text>
</g>
<g >
<title>do_page_fault (7 samples, 3.61%)</title><rect x="1117.0" y="373" width="42.6" height="15.0" fill="rgb(243,86,39)" rx="2" ry="2" />
<text  x="1120.01" y="383.5" >do_p..</text>
</g>
<g >
<title>async_page_fault (1 samples, 0.52%)</title><rect x="28.2" y="389" width="6.1" height="15.0" fill="rgb(223,206,17)" rx="2" ry="2" />
<text  x="31.25" y="399.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (2 samples, 1.03%)</title><rect x="216.8" y="277" width="12.2" height="15.0" fill="rgb(227,9,27)" rx="2" ry="2" />
<text  x="219.80" y="287.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.52%)</title><rect x="10.0" y="277" width="6.1" height="15.0" fill="rgb(231,27,4)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>free_unref_page_list (2 samples, 1.03%)</title><rect x="289.8" y="229" width="12.2" height="15.0" fill="rgb(236,72,53)" rx="2" ry="2" />
<text  x="292.79" y="239.5" ></text>
</g>
<g >
<title>do_wp_page (1 samples, 0.52%)</title><rect x="259.4" y="245" width="6.1" height="15.0" fill="rgb(231,170,20)" rx="2" ry="2" />
<text  x="262.38" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock (6 samples, 3.09%)</title><rect x="162.1" y="293" width="36.5" height="15.0" fill="rgb(227,111,30)" rx="2" ry="2" />
<text  x="165.06" y="303.5" >_ra..</text>
</g>
<g >
<title>[ld-2.31.so] (5 samples, 2.58%)</title><rect x="235.1" y="373" width="30.4" height="15.0" fill="rgb(249,55,39)" rx="2" ry="2" />
<text  x="238.05" y="383.5" >[l..</text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.52%)</title><rect x="10.0" y="389" width="6.1" height="15.0" fill="rgb(253,125,19)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>parquet-scan (193 samples, 99.48%)</title><rect x="16.1" y="437" width="1173.9" height="15.0" fill="rgb(208,90,39)" rx="2" ry="2" />
<text  x="19.08" y="447.5" >parquet-scan</text>
</g>
<g >
<title>__alloc_pages_nodemask (3 samples, 1.55%)</title><rect x="198.6" y="261" width="18.2" height="15.0" fill="rgb(231,67,53)" rx="2" ry="2" />
<text  x="201.56" y="271.5" ></text>
</g>
<g >
<title>ptep_clear_flush (1 samples, 0.52%)</title><rect x="28.2" y="245" width="6.1" height="15.0" fill="rgb(234,72,32)" rx="2" ry="2" />
<text  x="31.25" y="255.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (1 samples, 0.52%)</title><rect x="1147.4" y="277" width="6.1" height="15.0" fill="rgb(227,2,38)" rx="2" ry="2" />
<text  x="1150.42" y="287.5" ></text>
</g>
<g >
<title>ksys_pread64 (46 samples, 23.71%)</title><rect x="551.3" y="357" width="279.8" height="15.0" fill="rgb(229,167,46)" rx="2" ry="2" />
<text  x="554.34" y="367.5" >ksys_pread64</text>
</g>
<g >
<title>__libc_pread64 (46 samples, 23.71%)</title><rect x="551.3" y="421" width="279.8" height="15.0" fill="rgb(210,160,50)" rx="2" ry="2" />
<text  x="554.34" y="431.5" >__libc_pread64</text>
</g>
<g >
<title>do_user_addr_fault (26 samples, 13.40%)</title><rect x="642.6" y="149" width="158.1" height="15.0" fill="rgb(207,177,5)" rx="2" ry="2" />
<text  x="645.58" y="159.5" >do_user_addr_fault</text>
</g>
<g >
<title>release_pages (1 samples, 0.52%)</title><rect x="819.0" y="197" width="6.1" height="15.0" fill="rgb(218,121,46)" rx="2" ry="2" />
<text  x="821.97" y="207.5" ></text>
</g>
<g >
<title>do_page_fault (19 samples, 9.79%)</title><rect x="119.5" y="373" width="115.6" height="15.0" fill="rgb(248,123,43)" rx="2" ry="2" />
<text  x="122.48" y="383.5" >do_page_fault</text>
</g>
<g >
<title>copy_page (1 samples, 0.52%)</title><rect x="259.4" y="229" width="6.1" height="15.0" fill="rgb(238,170,35)" rx="2" ry="2" />
<text  x="262.38" y="239.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.52%)</title><rect x="10.0" y="229" width="6.1" height="15.0" fill="rgb(220,131,2)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>alloc_pages_vma (3 samples, 1.55%)</title><rect x="198.6" y="277" width="18.2" height="15.0" fill="rgb(238,61,1)" rx="2" ry="2" />
<text  x="201.56" y="287.5" ></text>
</g>
<g >
<title>arrow::internal::unpack14_32 (1 samples, 0.52%)</title><rect x="867.6" y="421" width="6.1" height="15.0" fill="rgb(240,72,22)" rx="2" ry="2" />
<text  x="870.63" y="431.5" ></text>
</g>
<g >
<title>do_anonymous_page (14 samples, 7.22%)</title><rect x="715.6" y="101" width="85.1" height="15.0" fill="rgb(237,216,3)" rx="2" ry="2" />
<text  x="718.57" y="111.5" >do_anonymo..</text>
</g>
<g >
<title>do_page_fault (1 samples, 0.52%)</title><rect x="259.4" y="325" width="6.1" height="15.0" fill="rgb(208,7,47)" rx="2" ry="2" />
<text  x="262.38" y="335.5" ></text>
</g>
<g >
<title>__handle_mm_fault (14 samples, 7.22%)</title><rect x="149.9" y="309" width="85.2" height="15.0" fill="rgb(206,194,43)" rx="2" ry="2" />
<text  x="152.90" y="319.5" >__handle_m..</text>
</g>
<g >
<title>async_page_fault (26 samples, 13.40%)</title><rect x="642.6" y="213" width="158.1" height="15.0" fill="rgb(229,193,41)" rx="2" ry="2" />
<text  x="645.58" y="223.5" >async_page_fault</text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.52%)</title><rect x="28.2" y="325" width="6.1" height="15.0" fill="rgb(238,202,9)" rx="2" ry="2" />
<text  x="31.25" y="335.5" ></text>
</g>
<g >
<title>__lock_text_start (3 samples, 1.55%)</title><rect x="800.7" y="197" width="18.3" height="15.0" fill="rgb(216,192,10)" rx="2" ry="2" />
<text  x="803.72" y="207.5" ></text>
</g>
<g >
<title>rmqueue (1 samples, 0.52%)</title><rect x="210.7" y="229" width="6.1" height="15.0" fill="rgb(237,3,51)" rx="2" ry="2" />
<text  x="213.72" y="239.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 1.55%)</title><rect x="1141.3" y="309" width="18.3" height="15.0" fill="rgb(253,186,40)" rx="2" ry="2" />
<text  x="1144.34" y="319.5" ></text>
</g>
<g >
<title>__vm_munmap (1 samples, 0.52%)</title><rect x="265.5" y="325" width="6.0" height="15.0" fill="rgb(241,202,8)" rx="2" ry="2" />
<text  x="268.46" y="335.5" ></text>
</g>
<g >
<title>generic_file_read_iter (46 samples, 23.71%)</title><rect x="551.3" y="277" width="279.8" height="15.0" fill="rgb(235,52,20)" rx="2" ry="2" />
<text  x="554.34" y="287.5" >generic_file_read_iter</text>
</g>
<g >
<title>free_unref_page_prepare.part.0 (1 samples, 0.52%)</title><rect x="302.0" y="229" width="6.0" height="15.0" fill="rgb(238,106,49)" rx="2" ry="2" />
<text  x="304.96" y="239.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (38 samples, 19.59%)</title><rect x="569.6" y="229" width="231.1" height="15.0" fill="rgb(223,148,12)" rx="2" ry="2" />
<text  x="572.59" y="239.5" >copy_user_enhanced_fast_string</text>
</g>
<g >
<title>activate_page (4 samples, 2.06%)</title><rect x="800.7" y="229" width="24.4" height="15.0" fill="rgb(226,221,21)" rx="2" ry="2" />
<text  x="803.72" y="239.5" >a..</text>
</g>
<g >
<title>parquet::ScanAllValues (1 samples, 0.52%)</title><rect x="1159.6" y="421" width="6.1" height="15.0" fill="rgb(254,62,25)" rx="2" ry="2" />
<text  x="1162.59" y="431.5" ></text>
</g>
<g >
<title>[ld-2.31.so] (1 samples, 0.52%)</title><rect x="28.2" y="405" width="6.1" height="15.0" fill="rgb(220,56,22)" rx="2" ry="2" />
<text  x="31.25" y="415.5" ></text>
</g>
<g >
<title>new_sync_read (46 samples, 23.71%)</title><rect x="551.3" y="309" width="279.8" height="15.0" fill="rgb(251,97,51)" rx="2" ry="2" />
<text  x="554.34" y="319.5" >new_sync_read</text>
</g>
<g >
<title>flush_tlb_mm_range (1 samples, 0.52%)</title><rect x="28.2" y="229" width="6.1" height="15.0" fill="rgb(253,76,43)" rx="2" ry="2" />
<text  x="31.25" y="239.5" ></text>
</g>
<g >
<title>async_page_fault (1 samples, 0.52%)</title><rect x="259.4" y="357" width="6.1" height="15.0" fill="rgb(227,36,0)" rx="2" ry="2" />
<text  x="262.38" y="367.5" ></text>
</g>
<g >
<title>try_charge (1 samples, 0.52%)</title><rect x="1153.5" y="245" width="6.1" height="15.0" fill="rgb(207,146,21)" rx="2" ry="2" />
<text  x="1156.51" y="255.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.52%)</title><rect x="28.2" y="293" width="6.1" height="15.0" fill="rgb(226,106,39)" rx="2" ry="2" />
<text  x="31.25" y="303.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (1 samples, 0.52%)</title><rect x="271.5" y="405" width="6.1" height="15.0" fill="rgb(231,218,3)" rx="2" ry="2" />
<text  x="274.55" y="415.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1 samples, 0.52%)</title><rect x="229.0" y="261" width="6.1" height="15.0" fill="rgb(229,37,9)" rx="2" ry="2" />
<text  x="231.97" y="271.5" ></text>
</g>
<g >
<title>do_group_exit (1 samples, 0.52%)</title><rect x="10.0" y="341" width="6.1" height="15.0" fill="rgb(248,198,54)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>async_page_fault (1 samples, 0.52%)</title><rect x="113.4" y="389" width="6.1" height="15.0" fill="rgb(234,69,41)" rx="2" ry="2" />
<text  x="116.40" y="399.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.52%)</title><rect x="782.5" y="53" width="6.1" height="15.0" fill="rgb(234,90,24)" rx="2" ry="2" />
<text  x="785.47" y="63.5" ></text>
</g>
<g >
<title>do_async_page_fault (26 samples, 13.40%)</title><rect x="642.6" y="197" width="158.1" height="15.0" fill="rgb(253,207,48)" rx="2" ry="2" />
<text  x="645.58" y="207.5" >do_async_page_fault</text>
</g>
<g >
<title>tlb_flush_mmu (4 samples, 2.06%)</title><rect x="283.7" y="277" width="24.3" height="15.0" fill="rgb(235,124,50)" rx="2" ry="2" />
<text  x="286.71" y="287.5" >t..</text>
</g>
<g >
<title>[unknown] (1 samples, 0.52%)</title><rect x="320.2" y="389" width="6.1" height="15.0" fill="rgb(236,37,46)" rx="2" ry="2" />
<text  x="323.21" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (46 samples, 23.71%)</title><rect x="551.3" y="405" width="279.8" height="15.0" fill="rgb(253,161,12)" rx="2" ry="2" />
<text  x="554.34" y="415.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>do_wp_page (1 samples, 0.52%)</title><rect x="28.2" y="277" width="6.1" height="15.0" fill="rgb(223,84,41)" rx="2" ry="2" />
<text  x="31.25" y="287.5" ></text>
</g>
<g >
<title>do_user_addr_fault (19 samples, 9.79%)</title><rect x="119.5" y="341" width="115.6" height="15.0" fill="rgb(224,31,6)" rx="2" ry="2" />
<text  x="122.48" y="351.5" >do_user_addr_f..</text>
</g>
<g >
<title>do_syscall_64 (6 samples, 3.09%)</title><rect x="283.7" y="357" width="36.5" height="15.0" fill="rgb(219,107,15)" rx="2" ry="2" />
<text  x="286.71" y="367.5" >do_..</text>
</g>
<g >
<title>do_async_page_fault (1 samples, 0.52%)</title><rect x="113.4" y="373" width="6.1" height="15.0" fill="rgb(209,37,27)" rx="2" ry="2" />
<text  x="116.40" y="383.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;arrow::ResizableBuffer,  (1 samples, 0.52%)</title><rect x="1177.8" y="421" width="6.1" height="15.0" fill="rgb(222,132,21)" rx="2" ry="2" />
<text  x="1180.84" y="431.5" ></text>
</g>
<g >
<title>parquet::(anonymous namespace)::DictDecoderImpl&lt;parquet::PhysicalType&lt; (3 samples, 1.55%)</title><rect x="1031.9" y="421" width="18.2" height="15.0" fill="rgb(214,97,29)" rx="2" ry="2" />
<text  x="1034.86" y="431.5" ></text>
</g>
<g >
<title>__do_page_fault (7 samples, 3.61%)</title><rect x="1117.0" y="357" width="42.6" height="15.0" fill="rgb(217,109,54)" rx="2" ry="2" />
<text  x="1120.01" y="367.5" >__do..</text>
</g>
<g >
<title>async_page_fault (19 samples, 9.79%)</title><rect x="119.5" y="405" width="115.6" height="15.0" fill="rgb(234,228,37)" rx="2" ry="2" />
<text  x="122.48" y="415.5" >async_page_fault</text>
</g>
<g >
<title>pagevec_lru_move_fn (4 samples, 2.06%)</title><rect x="800.7" y="213" width="24.4" height="15.0" fill="rgb(231,109,49)" rx="2" ry="2" />
<text  x="803.72" y="223.5" >p..</text>
</g>
<g >
<title>vfs_read (46 samples, 23.71%)</title><rect x="551.3" y="341" width="279.8" height="15.0" fill="rgb(245,107,54)" rx="2" ry="2" />
<text  x="554.34" y="351.5" >vfs_read</text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.52%)</title><rect x="229.0" y="245" width="6.1" height="15.0" fill="rgb(210,21,48)" rx="2" ry="2" />
<text  x="231.97" y="255.5" ></text>
</g>
<g >
<title>arrow::internal::unpack19_32 (1 samples, 0.52%)</title><rect x="892.0" y="421" width="6.0" height="15.0" fill="rgb(247,26,29)" rx="2" ry="2" />
<text  x="894.96" y="431.5" ></text>
</g>
<g >
<title>parquet::internal::standard::FindMinMaxImpl (2 samples, 1.03%)</title><rect x="1165.7" y="421" width="12.1" height="15.0" fill="rgb(214,67,11)" rx="2" ry="2" />
<text  x="1168.67" y="431.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.52%)</title><rect x="1147.4" y="229" width="6.1" height="15.0" fill="rgb(251,174,27)" rx="2" ry="2" />
<text  x="1150.42" y="239.5" ></text>
</g>
<g >
<title>[ld-2.31.so] (6 samples, 3.09%)</title><rect x="235.1" y="405" width="36.4" height="15.0" fill="rgb(236,85,47)" rx="2" ry="2" />
<text  x="238.05" y="415.5" >[ld..</text>
</g>
<g >
<title>handle_mm_fault (14 samples, 7.22%)</title><rect x="149.9" y="325" width="85.2" height="15.0" fill="rgb(224,209,22)" rx="2" ry="2" />
<text  x="152.90" y="335.5" >handle_mm_..</text>
</g>
<g >
<title>_raw_spin_lock (3 samples, 1.55%)</title><rect x="697.3" y="101" width="18.3" height="15.0" fill="rgb(231,67,16)" rx="2" ry="2" />
<text  x="700.32" y="111.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (46 samples, 23.71%)</title><rect x="551.3" y="373" width="279.8" height="15.0" fill="rgb(209,117,25)" rx="2" ry="2" />
<text  x="554.34" y="383.5" >__x64_sys_pread64</text>
</g>
<g >
<title>generic_file_buffered_read (46 samples, 23.71%)</title><rect x="551.3" y="261" width="279.8" height="15.0" fill="rgb(226,51,50)" rx="2" ry="2" />
<text  x="554.34" y="271.5" >generic_file_buffered_read</text>
</g>
<g >
<title>jemalloc_bg_thd (1 samples, 0.52%)</title><rect x="10.0" y="437" width="6.1" height="15.0" fill="rgb(244,202,5)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (6 samples, 3.09%)</title><rect x="283.7" y="341" width="36.5" height="15.0" fill="rgb(231,8,11)" rx="2" ry="2" />
<text  x="286.71" y="351.5" >__x..</text>
</g>
<g >
<title>page_counter_try_charge (1 samples, 0.52%)</title><rect x="794.6" y="37" width="6.1" height="15.0" fill="rgb(231,172,15)" rx="2" ry="2" />
<text  x="797.64" y="47.5" ></text>
</g>
<g >
<title>prep_new_page (1 samples, 0.52%)</title><rect x="733.8" y="37" width="6.1" height="15.0" fill="rgb(237,122,2)" rx="2" ry="2" />
<text  x="736.81" y="47.5" ></text>
</g>
<g >
<title>__tlb_remove_page_size (1 samples, 0.52%)</title><rect x="265.5" y="213" width="6.0" height="15.0" fill="rgb(227,25,37)" rx="2" ry="2" />
<text  x="268.46" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6 samples, 3.09%)</title><rect x="283.7" y="373" width="36.5" height="15.0" fill="rgb(224,63,13)" rx="2" ry="2" />
<text  x="286.71" y="383.5" >ent..</text>
</g>
<g >
<title>alloc_pages_vma (4 samples, 2.06%)</title><rect x="715.6" y="85" width="24.3" height="15.0" fill="rgb(228,28,16)" rx="2" ry="2" />
<text  x="718.57" y="95.5" >a..</text>
</g>
<g >
<title>__madvise (6 samples, 3.09%)</title><rect x="283.7" y="389" width="36.5" height="15.0" fill="rgb(251,187,2)" rx="2" ry="2" />
<text  x="286.71" y="399.5" >__m..</text>
</g>
<g >
<title>parquet::(anonymous namespace)::PlainDecoder&lt;parquet::PhysicalType&lt; (18 samples, 9.28%)</title><rect x="1050.1" y="421" width="109.5" height="15.0" fill="rgb(244,152,10)" rx="2" ry="2" />
<text  x="1053.10" y="431.5" >parquet::(ano..</text>
</g>
<g >
<title>__do_page_fault (26 samples, 13.40%)</title><rect x="642.6" y="165" width="158.1" height="15.0" fill="rgb(215,224,25)" rx="2" ry="2" />
<text  x="645.58" y="175.5" >__do_page_fault</text>
</g>
<g >
<title>arrow::internal::unpack13_32 (2 samples, 1.03%)</title><rect x="855.5" y="421" width="12.1" height="15.0" fill="rgb(246,4,21)" rx="2" ry="2" />
<text  x="858.46" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.52%)</title><rect x="265.5" y="373" width="6.0" height="15.0" fill="rgb(207,1,52)" rx="2" ry="2" />
<text  x="268.46" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.52%)</title><rect x="265.5" y="357" width="6.0" height="15.0" fill="rgb(220,149,45)" rx="2" ry="2" />
<text  x="268.46" y="367.5" ></text>
</g>
<g >
<title>do_async_page_fault (7 samples, 3.61%)</title><rect x="1117.0" y="389" width="42.6" height="15.0" fill="rgb(219,60,47)" rx="2" ry="2" />
<text  x="1120.01" y="399.5" >do_a..</text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.52%)</title><rect x="259.4" y="293" width="6.1" height="15.0" fill="rgb(240,178,43)" rx="2" ry="2" />
<text  x="262.38" y="303.5" ></text>
</g>
<g >
<title>arrow::bit_util::BitReader::GetBatch&lt;int&gt; (3 samples, 1.55%)</title><rect x="831.1" y="421" width="18.3" height="15.0" fill="rgb(245,50,21)" rx="2" ry="2" />
<text  x="834.13" y="431.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.52%)</title><rect x="259.4" y="277" width="6.1" height="15.0" fill="rgb(251,184,19)" rx="2" ry="2" />
<text  x="262.38" y="287.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.52%)</title><rect x="259.4" y="309" width="6.1" height="15.0" fill="rgb(248,104,23)" rx="2" ry="2" />
<text  x="262.38" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.52%)</title><rect x="10.0" y="421" width="6.1" height="15.0" fill="rgb(213,19,28)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (4 samples, 2.06%)</title><rect x="283.7" y="293" width="24.3" height="15.0" fill="rgb(229,79,9)" rx="2" ry="2" />
<text  x="286.71" y="303.5" >t..</text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.52%)</title><rect x="727.7" y="37" width="6.1" height="15.0" fill="rgb(254,110,31)" rx="2" ry="2" />
<text  x="730.73" y="47.5" ></text>
</g>
<g >
<title>__do_munmap (1 samples, 0.52%)</title><rect x="265.5" y="309" width="6.0" height="15.0" fill="rgb(227,21,5)" rx="2" ry="2" />
<text  x="268.46" y="319.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.52%)</title><rect x="1141.3" y="293" width="6.1" height="15.0" fill="rgb(242,90,33)" rx="2" ry="2" />
<text  x="1144.34" y="303.5" ></text>
</g>
<g >
<title>get_signal (1 samples, 0.52%)</title><rect x="10.0" y="357" width="6.1" height="15.0" fill="rgb(216,169,38)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>do_anonymous_page (2 samples, 1.03%)</title><rect x="1147.4" y="293" width="12.2" height="15.0" fill="rgb(225,171,12)" rx="2" ry="2" />
<text  x="1150.42" y="303.5" ></text>
</g>
<g >
<title>alloc_pages_current (1 samples, 0.52%)</title><rect x="265.5" y="181" width="6.0" height="15.0" fill="rgb(213,217,37)" rx="2" ry="2" />
<text  x="268.46" y="191.5" ></text>
</g>
<g >
<title>[ld-2.31.so] (6 samples, 3.09%)</title><rect x="235.1" y="389" width="36.4" height="15.0" fill="rgb(215,197,22)" rx="2" ry="2" />
<text  x="238.05" y="399.5" >[ld..</text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (1 samples, 0.52%)</title><rect x="1153.5" y="277" width="6.1" height="15.0" fill="rgb(218,49,15)" rx="2" ry="2" />
<text  x="1156.51" y="287.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (8 samples, 4.12%)</title><rect x="752.1" y="69" width="48.6" height="15.0" fill="rgb(220,88,52)" rx="2" ry="2" />
<text  x="755.06" y="79.5" >mem_..</text>
</g>
<g >
<title>async_page_fault (7 samples, 3.61%)</title><rect x="1117.0" y="405" width="42.6" height="15.0" fill="rgb(217,91,26)" rx="2" ry="2" />
<text  x="1120.01" y="415.5" >asyn..</text>
</g>
<g >
<title>arrow::bit_util::BitReader::GetBatch&lt;short&gt; (1 samples, 0.52%)</title><rect x="849.4" y="421" width="6.1" height="15.0" fill="rgb(222,199,33)" rx="2" ry="2" />
<text  x="852.38" y="431.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.52%)</title><rect x="265.5" y="245" width="6.0" height="15.0" fill="rgb(208,203,29)" rx="2" ry="2" />
<text  x="268.46" y="255.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (1 samples, 0.52%)</title><rect x="1147.4" y="245" width="6.1" height="15.0" fill="rgb(239,123,49)" rx="2" ry="2" />
<text  x="1150.42" y="255.5" ></text>
</g>
<g >
<title>__get_free_pages (1 samples, 0.52%)</title><rect x="265.5" y="197" width="6.0" height="15.0" fill="rgb(219,35,18)" rx="2" ry="2" />
<text  x="268.46" y="207.5" ></text>
</g>
<g >
<title>arrow::util::RleDecoder::GetBatchWithDict&lt;parquet::ByteArray&gt; (21 samples, 10.82%)</title><rect x="904.1" y="421" width="127.8" height="15.0" fill="rgb(238,218,44)" rx="2" ry="2" />
<text  x="907.12" y="431.5" >arrow::util::Rle..</text>
</g>
<g >
<title>arrow::internal::unpack15_32 (3 samples, 1.55%)</title><rect x="873.7" y="421" width="18.3" height="15.0" fill="rgb(229,72,7)" rx="2" ry="2" />
<text  x="876.71" y="431.5" ></text>
</g>
</g>
</svg>
