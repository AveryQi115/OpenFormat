<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>orc::RleDecoderV2::nextDelta (4 samples, 1.91%)</title><rect x="1105.3" y="357" width="22.6" height="15.0" fill="rgb(205,148,0)" rx="2" ry="2" />
<text  x="1108.31" y="367.5" >o..</text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.48%)</title><rect x="856.9" y="165" width="5.6" height="15.0" fill="rgb(236,53,38)" rx="2" ry="2" />
<text  x="859.89" y="175.5" ></text>
</g>
<g >
<title>protobuf_ClientNamenodeProtocol_2eproto::AddDescriptorsImpl (1 samples, 0.48%)</title><rect x="862.5" y="325" width="5.7" height="15.0" fill="rgb(239,46,9)" rx="2" ry="2" />
<text  x="865.54" y="335.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I_descriptor.pb.cc (1 samples, 0.48%)</title><rect x="873.8" y="341" width="5.7" height="15.0" fill="rgb(244,71,23)" rx="2" ry="2" />
<text  x="876.83" y="351.5" ></text>
</g>
<g >
<title>unmap_single_vma (2 samples, 0.96%)</title><rect x="1020.6" y="229" width="11.3" height="15.0" fill="rgb(235,77,50)" rx="2" ry="2" />
<text  x="1023.62" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.96%)</title><rect x="851.2" y="293" width="11.3" height="15.0" fill="rgb(214,137,10)" rx="2" ry="2" />
<text  x="854.24" y="303.5" ></text>
</g>
<g >
<title>get_task_policy.part.0 (1 samples, 0.48%)</title><rect x="230.2" y="181" width="5.6" height="15.0" fill="rgb(222,209,12)" rx="2" ry="2" />
<text  x="233.19" y="191.5" ></text>
</g>
<g >
<title>try_charge (1 samples, 0.48%)</title><rect x="365.7" y="165" width="5.6" height="15.0" fill="rgb(218,223,25)" rx="2" ry="2" />
<text  x="368.69" y="175.5" ></text>
</g>
<g >
<title>std::make_pair&lt;unsigned int&amp;, bool&gt; (1 samples, 0.48%)</title><rect x="873.8" y="85" width="5.7" height="15.0" fill="rgb(227,202,24)" rx="2" ry="2" />
<text  x="876.83" y="95.5" ></text>
</g>
<g >
<title>__page_cache_alloc (7 samples, 3.35%)</title><rect x="941.6" y="133" width="39.5" height="15.0" fill="rgb(227,118,46)" rx="2" ry="2" />
<text  x="944.58" y="143.5" >__p..</text>
</g>
<g >
<title>pagevec_lru_move_fn (3 samples, 1.44%)</title><rect x="241.5" y="181" width="16.9" height="15.0" fill="rgb(211,205,35)" rx="2" ry="2" />
<text  x="244.48" y="191.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (2 samples, 0.96%)</title><rect x="1020.6" y="165" width="11.3" height="15.0" fill="rgb(214,32,5)" rx="2" ry="2" />
<text  x="1023.62" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.96%)</title><rect x="851.2" y="277" width="11.3" height="15.0" fill="rgb(235,190,4)" rx="2" ry="2" />
<text  x="854.24" y="287.5" ></text>
</g>
<g >
<title>xa_load (3 samples, 1.44%)</title><rect x="998.0" y="133" width="17.0" height="15.0" fill="rgb(208,32,47)" rx="2" ry="2" />
<text  x="1001.04" y="143.5" ></text>
</g>
<g >
<title>exit_mmap (2 samples, 0.96%)</title><rect x="1020.6" y="261" width="11.3" height="15.0" fill="rgb(223,96,33)" rx="2" ry="2" />
<text  x="1023.62" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.96%)</title><rect x="1020.6" y="341" width="11.3" height="15.0" fill="rgb(236,200,38)" rx="2" ry="2" />
<text  x="1023.62" y="351.5" ></text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (1 samples, 0.48%)</title><rect x="264.1" y="213" width="5.6" height="15.0" fill="rgb(237,135,27)" rx="2" ry="2" />
<text  x="267.07" y="223.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.96%)</title><rect x="851.2" y="325" width="11.3" height="15.0" fill="rgb(213,32,51)" rx="2" ry="2" />
<text  x="854.24" y="335.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (2 samples, 0.96%)</title><rect x="360.0" y="197" width="11.3" height="15.0" fill="rgb(237,153,42)" rx="2" ry="2" />
<text  x="363.05" y="207.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (2 samples, 0.96%)</title><rect x="986.7" y="85" width="11.3" height="15.0" fill="rgb(234,176,20)" rx="2" ry="2" />
<text  x="989.75" y="95.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (2 samples, 0.96%)</title><rect x="1020.6" y="325" width="11.3" height="15.0" fill="rgb(243,6,14)" rx="2" ry="2" />
<text  x="1023.62" y="335.5" ></text>
</g>
<g >
<title>rmqueue (1 samples, 0.48%)</title><rect x="354.4" y="149" width="5.6" height="15.0" fill="rgb(248,22,38)" rx="2" ry="2" />
<text  x="357.40" y="159.5" ></text>
</g>
<g >
<title>__lock_text_start (2 samples, 0.96%)</title><rect x="241.5" y="165" width="11.3" height="15.0" fill="rgb(238,40,23)" rx="2" ry="2" />
<text  x="244.48" y="175.5" ></text>
</g>
<g >
<title>do_anonymous_page (3 samples, 1.44%)</title><rect x="354.4" y="213" width="16.9" height="15.0" fill="rgb(244,95,30)" rx="2" ry="2" />
<text  x="357.40" y="223.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (1 samples, 0.48%)</title><rect x="856.9" y="149" width="5.6" height="15.0" fill="rgb(245,30,20)" rx="2" ry="2" />
<text  x="859.89" y="159.5" ></text>
</g>
<g >
<title>xas_load (1 samples, 0.48%)</title><rect x="1015.0" y="117" width="5.6" height="15.0" fill="rgb(230,113,44)" rx="2" ry="2" />
<text  x="1017.98" y="127.5" ></text>
</g>
<g >
<title>policy_nodemask (1 samples, 0.48%)</title><rect x="975.5" y="117" width="5.6" height="15.0" fill="rgb(232,91,46)" rx="2" ry="2" />
<text  x="978.45" y="127.5" ></text>
</g>
<g >
<title>__libc_csu_init (1 samples, 0.48%)</title><rect x="873.8" y="357" width="5.7" height="15.0" fill="rgb(220,214,49)" rx="2" ry="2" />
<text  x="876.83" y="367.5" ></text>
</g>
<g >
<title>google::protobuf::MessageLite::ParseFromArray (1 samples, 0.48%)</title><rect x="873.8" y="181" width="5.7" height="15.0" fill="rgb(247,37,54)" rx="2" ry="2" />
<text  x="876.83" y="191.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.48%)</title><rect x="1020.6" y="133" width="5.7" height="15.0" fill="rgb(248,130,7)" rx="2" ry="2" />
<text  x="1023.62" y="143.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.96%)</title><rect x="851.2" y="261" width="11.3" height="15.0" fill="rgb(222,51,28)" rx="2" ry="2" />
<text  x="854.24" y="271.5" ></text>
</g>
<g >
<title>[unknown] (15 samples, 7.18%)</title><rect x="766.6" y="309" width="84.6" height="15.0" fill="rgb(236,167,31)" rx="2" ry="2" />
<text  x="769.56" y="319.5" >[unknown]</text>
</g>
<g >
<title>orc::RleDecoderV2::unrolledUnpack8 (2 samples, 0.96%)</title><rect x="1178.7" y="357" width="11.3" height="15.0" fill="rgb(225,18,20)" rx="2" ry="2" />
<text  x="1181.71" y="367.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (25 samples, 11.96%)</title><rect x="879.5" y="229" width="141.1" height="15.0" fill="rgb(218,109,12)" rx="2" ry="2" />
<text  x="882.47" y="239.5" >ext4_file_read_iter</text>
</g>
<g >
<title>protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors (1 samples, 0.48%)</title><rect x="873.8" y="293" width="5.7" height="15.0" fill="rgb(218,8,39)" rx="2" ry="2" />
<text  x="876.83" y="303.5" ></text>
</g>
<g >
<title>handle_mm_fault (26 samples, 12.44%)</title><rect x="156.8" y="261" width="146.8" height="15.0" fill="rgb(218,175,21)" rx="2" ry="2" />
<text  x="159.79" y="271.5" >handle_mm_fault</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 1.44%)</title><rect x="371.3" y="325" width="17.0" height="15.0" fill="rgb(209,174,45)" rx="2" ry="2" />
<text  x="374.34" y="335.5" ></text>
</g>
<g >
<title>google::protobuf::DescriptorProto::MergePartialFromCodedStream (1 samples, 0.48%)</title><rect x="873.8" y="133" width="5.7" height="15.0" fill="rgb(254,63,8)" rx="2" ry="2" />
<text  x="876.83" y="143.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (7 samples, 3.35%)</title><rect x="902.1" y="165" width="39.5" height="15.0" fill="rgb(230,209,3)" rx="2" ry="2" />
<text  x="905.06" y="175.5" >cop..</text>
</g>
<g >
<title>release_pages (2 samples, 0.96%)</title><rect x="1020.6" y="149" width="11.3" height="15.0" fill="rgb(242,166,1)" rx="2" ry="2" />
<text  x="1023.62" y="159.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (1 samples, 0.48%)</title><rect x="258.4" y="213" width="5.7" height="15.0" fill="rgb(224,97,5)" rx="2" ry="2" />
<text  x="261.42" y="223.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;void const*, int&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::pair&lt;void const*, int&gt; &gt; &gt; &gt;::insert (1 samples, 0.48%)</title><rect x="862.5" y="245" width="5.7" height="15.0" fill="rgb(243,78,51)" rx="2" ry="2" />
<text  x="865.54" y="255.5" ></text>
</g>
<g >
<title>do_user_addr_fault (40 samples, 19.14%)</title><rect x="77.8" y="277" width="225.8" height="15.0" fill="rgb(211,204,30)" rx="2" ry="2" />
<text  x="80.75" y="287.5" >do_user_addr_fault</text>
</g>
<g >
<title>[ld-2.31.so] (1 samples, 0.48%)</title><rect x="10.0" y="357" width="5.6" height="15.0" fill="rgb(237,33,24)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>ext4_mpage_readpages (3 samples, 1.44%)</title><rect x="981.1" y="101" width="16.9" height="15.0" fill="rgb(246,123,53)" rx="2" ry="2" />
<text  x="984.10" y="111.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (52 samples, 24.88%)</title><rect x="15.6" y="357" width="293.6" height="15.0" fill="rgb(248,35,10)" rx="2" ry="2" />
<text  x="18.65" y="367.5" >[libc-2.31.so]</text>
</g>
<g >
<title>ondemand_readahead (13 samples, 6.22%)</title><rect x="941.6" y="165" width="73.4" height="15.0" fill="rgb(227,200,32)" rx="2" ry="2" />
<text  x="944.58" y="175.5" >ondemand..</text>
</g>
<g >
<title>unmap_page_range (2 samples, 0.96%)</title><rect x="1020.6" y="213" width="11.3" height="15.0" fill="rgb(234,193,25)" rx="2" ry="2" />
<text  x="1023.62" y="223.5" ></text>
</g>
<g >
<title>__do_munmap (2 samples, 0.96%)</title><rect x="851.2" y="229" width="11.3" height="15.0" fill="rgb(215,151,20)" rx="2" ry="2" />
<text  x="854.24" y="239.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.48%)</title><rect x="354.4" y="197" width="5.6" height="15.0" fill="rgb(237,56,6)" rx="2" ry="2" />
<text  x="357.40" y="207.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (2 samples, 0.96%)</title><rect x="371.3" y="149" width="11.3" height="15.0" fill="rgb(208,197,16)" rx="2" ry="2" />
<text  x="374.34" y="159.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.48%)</title><rect x="382.6" y="85" width="5.7" height="15.0" fill="rgb(230,79,46)" rx="2" ry="2" />
<text  x="385.63" y="95.5" ></text>
</g>
<g >
<title>do_anonymous_page (21 samples, 10.05%)</title><rect x="185.0" y="229" width="118.6" height="15.0" fill="rgb(208,194,12)" rx="2" ry="2" />
<text  x="188.02" y="239.5" >do_anonymous_p..</text>
</g>
<g >
<title>async_page_fault (41 samples, 19.62%)</title><rect x="77.8" y="341" width="231.4" height="15.0" fill="rgb(210,178,40)" rx="2" ry="2" />
<text  x="80.75" y="351.5" >async_page_fault</text>
</g>
<g >
<title>google::protobuf::EncodedDescriptorDatabase::Add (1 samples, 0.48%)</title><rect x="873.8" y="197" width="5.7" height="15.0" fill="rgb(242,223,50)" rx="2" ry="2" />
<text  x="876.83" y="207.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.48%)</title><rect x="354.4" y="165" width="5.6" height="15.0" fill="rgb(235,212,6)" rx="2" ry="2" />
<text  x="357.40" y="175.5" ></text>
</g>
<g >
<title>try_charge (1 samples, 0.48%)</title><rect x="297.9" y="181" width="5.7" height="15.0" fill="rgb(215,117,31)" rx="2" ry="2" />
<text  x="300.94" y="191.5" ></text>
</g>
<g >
<title>google::protobuf::FieldDescriptorProto::MergePartialFromCodedStream (1 samples, 0.48%)</title><rect x="873.8" y="101" width="5.7" height="15.0" fill="rgb(223,85,53)" rx="2" ry="2" />
<text  x="876.83" y="111.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 1.44%)</title><rect x="371.3" y="309" width="17.0" height="15.0" fill="rgb(252,220,33)" rx="2" ry="2" />
<text  x="374.34" y="319.5" ></text>
</g>
<g >
<title>xas_load (2 samples, 0.96%)</title><rect x="1003.7" y="117" width="11.3" height="15.0" fill="rgb(251,103,16)" rx="2" ry="2" />
<text  x="1006.68" y="127.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.48%)</title><rect x="292.3" y="181" width="5.6" height="15.0" fill="rgb(219,46,17)" rx="2" ry="2" />
<text  x="295.30" y="191.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (1 samples, 0.48%)</title><rect x="1015.0" y="149" width="5.6" height="15.0" fill="rgb(215,44,6)" rx="2" ry="2" />
<text  x="1017.98" y="159.5" ></text>
</g>
<g >
<title>google::protobuf::SimpleDescriptorDatabase::DescriptorIndex&lt;std::pair&lt;void const*, int&gt; &gt;::AddSymbol (1 samples, 0.48%)</title><rect x="862.5" y="261" width="5.7" height="15.0" fill="rgb(247,182,3)" rx="2" ry="2" />
<text  x="865.54" y="271.5" ></text>
</g>
<g >
<title>rmqueue (3 samples, 1.44%)</title><rect x="213.3" y="165" width="16.9" height="15.0" fill="rgb(236,50,0)" rx="2" ry="2" />
<text  x="216.25" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (25 samples, 11.96%)</title><rect x="879.5" y="325" width="141.1" height="15.0" fill="rgb(208,133,37)" rx="2" ry="2" />
<text  x="882.47" y="335.5" >do_syscall_64</text>
</g>
<g >
<title>do_user_addr_fault (4 samples, 1.91%)</title><rect x="348.8" y="261" width="22.5" height="15.0" fill="rgb(242,75,18)" rx="2" ry="2" />
<text  x="351.76" y="271.5" >d..</text>
</g>
<g >
<title>copy_page_to_iter (2 samples, 0.96%)</title><rect x="371.3" y="165" width="11.3" height="15.0" fill="rgb(227,142,33)" rx="2" ry="2" />
<text  x="374.34" y="175.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (2 samples, 0.96%)</title><rect x="1020.6" y="181" width="11.3" height="15.0" fill="rgb(246,57,18)" rx="2" ry="2" />
<text  x="1023.62" y="191.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (3 samples, 1.44%)</title><rect x="371.3" y="181" width="17.0" height="15.0" fill="rgb(226,184,4)" rx="2" ry="2" />
<text  x="374.34" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (25 samples, 11.96%)</title><rect x="879.5" y="341" width="141.1" height="15.0" fill="rgb(252,153,5)" rx="2" ry="2" />
<text  x="882.47" y="351.5" >entry_SYSCALL_64_..</text>
</g>
<g >
<title>orc::RleDecoderV2::unrolledUnpack24 (1 samples, 0.48%)</title><rect x="1173.1" y="357" width="5.6" height="15.0" fill="rgb(240,81,26)" rx="2" ry="2" />
<text  x="1176.06" y="367.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.48%)</title><rect x="354.4" y="181" width="5.6" height="15.0" fill="rgb(239,225,47)" rx="2" ry="2" />
<text  x="357.40" y="191.5" ></text>
</g>
<g >
<title>xas_load (2 samples, 0.96%)</title><rect x="986.7" y="37" width="11.3" height="15.0" fill="rgb(209,124,23)" rx="2" ry="2" />
<text  x="989.75" y="47.5" ></text>
</g>
<g >
<title>memcpy@plt (1 samples, 0.48%)</title><rect x="1031.9" y="357" width="5.7" height="15.0" fill="rgb(248,99,15)" rx="2" ry="2" />
<text  x="1034.91" y="367.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (3 samples, 1.44%)</title><rect x="371.3" y="293" width="17.0" height="15.0" fill="rgb(207,79,50)" rx="2" ry="2" />
<text  x="374.34" y="303.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (4 samples, 1.91%)</title><rect x="235.8" y="213" width="22.6" height="15.0" fill="rgb(253,41,49)" rx="2" ry="2" />
<text  x="238.84" y="223.5" >l..</text>
</g>
<g >
<title>page_cache_sync_readahead (1 samples, 0.48%)</title><rect x="1015.0" y="181" width="5.6" height="15.0" fill="rgb(247,190,5)" rx="2" ry="2" />
<text  x="1017.98" y="191.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.48%)</title><rect x="382.6" y="53" width="5.7" height="15.0" fill="rgb(225,135,34)" rx="2" ry="2" />
<text  x="385.63" y="63.5" ></text>
</g>
<g >
<title>unmap_vmas (2 samples, 0.96%)</title><rect x="1020.6" y="245" width="11.3" height="15.0" fill="rgb(226,171,15)" rx="2" ry="2" />
<text  x="1023.62" y="255.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.48%)</title><rect x="851.2" y="133" width="5.7" height="15.0" fill="rgb(231,219,32)" rx="2" ry="2" />
<text  x="854.24" y="143.5" ></text>
</g>
<g >
<title>__do_page_fault (41 samples, 19.62%)</title><rect x="77.8" y="293" width="231.4" height="15.0" fill="rgb(230,94,14)" rx="2" ry="2" />
<text  x="80.75" y="303.5" >__do_page_fault</text>
</g>
<g >
<title>__vfs_read (3 samples, 1.44%)</title><rect x="371.3" y="245" width="17.0" height="15.0" fill="rgb(237,168,43)" rx="2" ry="2" />
<text  x="374.34" y="255.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (2 samples, 0.96%)</title><rect x="1020.6" y="197" width="11.3" height="15.0" fill="rgb(206,113,7)" rx="2" ry="2" />
<text  x="1023.62" y="207.5" ></text>
</g>
<g >
<title>new_sync_read (3 samples, 1.44%)</title><rect x="371.3" y="229" width="17.0" height="15.0" fill="rgb(230,212,42)" rx="2" ry="2" />
<text  x="374.34" y="239.5" ></text>
</g>
<g >
<title>down_read_trylock (1 samples, 0.48%)</title><rect x="303.6" y="277" width="5.6" height="15.0" fill="rgb(243,41,40)" rx="2" ry="2" />
<text  x="306.59" y="287.5" ></text>
</g>
<g >
<title>orc::RleDecoderV2::nextDirect (6 samples, 2.87%)</title><rect x="1127.9" y="357" width="33.9" height="15.0" fill="rgb(209,187,0)" rx="2" ry="2" />
<text  x="1130.89" y="367.5" >or..</text>
</g>
<g >
<title>generic_file_read_iter (3 samples, 1.44%)</title><rect x="371.3" y="197" width="17.0" height="15.0" fill="rgb(242,54,25)" rx="2" ry="2" />
<text  x="374.34" y="207.5" ></text>
</g>
<g >
<title>__vfs_read (25 samples, 11.96%)</title><rect x="879.5" y="261" width="141.1" height="15.0" fill="rgb(241,61,2)" rx="2" ry="2" />
<text  x="882.47" y="271.5" >__vfs_read</text>
</g>
<g >
<title>orc::StringDictionaryColumnReader::~StringDictionaryColumnReader (15 samples, 7.18%)</title><rect x="766.6" y="341" width="84.6" height="15.0" fill="rgb(237,51,25)" rx="2" ry="2" />
<text  x="769.56" y="351.5" >orc::Stri..</text>
</g>
<g >
<title>__alloc_pages_nodemask (2 samples, 0.96%)</title><rect x="952.9" y="101" width="11.3" height="15.0" fill="rgb(248,97,41)" rx="2" ry="2" />
<text  x="955.87" y="111.5" ></text>
</g>
<g >
<title>google::protobuf::SimpleDescriptorDatabase::DescriptorIndex&lt;std::pair&lt;void const*, int&gt; &gt;::AddFile (1 samples, 0.48%)</title><rect x="862.5" y="277" width="5.7" height="15.0" fill="rgb(227,165,13)" rx="2" ry="2" />
<text  x="865.54" y="287.5" ></text>
</g>
<g >
<title>__page_cache_alloc (1 samples, 0.48%)</title><rect x="382.6" y="117" width="5.7" height="15.0" fill="rgb(240,188,9)" rx="2" ry="2" />
<text  x="385.63" y="127.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (2 samples, 0.96%)</title><rect x="360.0" y="181" width="11.3" height="15.0" fill="rgb(212,151,23)" rx="2" ry="2" />
<text  x="363.05" y="191.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.96%)</title><rect x="964.2" y="101" width="11.3" height="15.0" fill="rgb(220,199,13)" rx="2" ry="2" />
<text  x="967.16" y="111.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (1 samples, 0.48%)</title><rect x="382.6" y="133" width="5.7" height="15.0" fill="rgb(231,65,14)" rx="2" ry="2" />
<text  x="385.63" y="143.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::~ctype (2 samples, 0.96%)</title><rect x="851.2" y="341" width="11.3" height="15.0" fill="rgb(245,141,39)" rx="2" ry="2" />
<text  x="854.24" y="351.5" ></text>
</g>
<g >
<title>orc::StringDictionaryColumnReader::next (59 samples, 28.23%)</title><rect x="433.4" y="341" width="333.2" height="15.0" fill="rgb(214,179,38)" rx="2" ry="2" />
<text  x="436.44" y="351.5" >orc::StringDictionaryColumnReader::next</text>
</g>
<g >
<title>orc::StringDictionaryColumnReader::next (14 samples, 6.70%)</title><rect x="766.6" y="293" width="79.0" height="15.0" fill="rgb(217,7,53)" rx="2" ry="2" />
<text  x="769.56" y="303.5" >orc::Stri..</text>
</g>
<g >
<title>__handle_mm_fault (26 samples, 12.44%)</title><rect x="156.8" y="245" width="146.8" height="15.0" fill="rgb(213,13,9)" rx="2" ry="2" />
<text  x="159.79" y="255.5" >__handle_mm_fault</text>
</g>
<g >
<title>__libc_pread64 (25 samples, 11.96%)</title><rect x="879.5" y="357" width="141.1" height="15.0" fill="rgb(233,208,48)" rx="2" ry="2" />
<text  x="882.47" y="367.5" >__libc_pread64</text>
</g>
<g >
<title>do_page_fault (41 samples, 19.62%)</title><rect x="77.8" y="309" width="231.4" height="15.0" fill="rgb(208,179,43)" rx="2" ry="2" />
<text  x="80.75" y="319.5" >do_page_fault</text>
</g>
<g >
<title>orc::RleDecoderV2::nextShortRepeats (1 samples, 0.48%)</title><rect x="393.9" y="341" width="5.7" height="15.0" fill="rgb(211,98,37)" rx="2" ry="2" />
<text  x="396.92" y="351.5" ></text>
</g>
<g >
<title>google::protobuf::EncodedDescriptorDatabase::Add (1 samples, 0.48%)</title><rect x="862.5" y="293" width="5.7" height="15.0" fill="rgb(218,205,17)" rx="2" ry="2" />
<text  x="865.54" y="303.5" ></text>
</g>
<g >
<title>vfs_read (25 samples, 11.96%)</title><rect x="879.5" y="277" width="141.1" height="15.0" fill="rgb(243,130,41)" rx="2" ry="2" />
<text  x="882.47" y="287.5" >vfs_read</text>
</g>
<g >
<title>new_sync_read (25 samples, 11.96%)</title><rect x="879.5" y="245" width="141.1" height="15.0" fill="rgb(246,77,52)" rx="2" ry="2" />
<text  x="882.47" y="255.5" >new_sync_read</text>
</g>
<g >
<title>page_cache_async_readahead (13 samples, 6.22%)</title><rect x="941.6" y="181" width="73.4" height="15.0" fill="rgb(217,129,48)" rx="2" ry="2" />
<text  x="944.58" y="191.5" >page_cac..</text>
</g>
<g >
<title>orc::RleDecoderV2::next (1 samples, 0.48%)</title><rect x="388.3" y="341" width="5.6" height="15.0" fill="rgb(253,23,26)" rx="2" ry="2" />
<text  x="391.28" y="351.5" ></text>
</g>
<g >
<title>[unknown] (15 samples, 7.18%)</title><rect x="766.6" y="325" width="84.6" height="15.0" fill="rgb(254,172,43)" rx="2" ry="2" />
<text  x="769.56" y="335.5" >[unknown]</text>
</g>
<g >
<title>free_pcp_prepare (1 samples, 0.48%)</title><rect x="1026.3" y="133" width="5.6" height="15.0" fill="rgb(210,61,47)" rx="2" ry="2" />
<text  x="1029.27" y="143.5" ></text>
</g>
<g >
<title>google::protobuf::FileDescriptorProto::MergePartialFromCodedStream (1 samples, 0.48%)</title><rect x="873.8" y="165" width="5.7" height="15.0" fill="rgb(232,219,28)" rx="2" ry="2" />
<text  x="876.83" y="175.5" ></text>
</g>
<g >
<title>__lru_cache_add (3 samples, 1.44%)</title><rect x="241.5" y="197" width="16.9" height="15.0" fill="rgb(244,96,8)" rx="2" ry="2" />
<text  x="244.48" y="207.5" ></text>
</g>
<g >
<title>do_async_page_fault (41 samples, 19.62%)</title><rect x="77.8" y="325" width="231.4" height="15.0" fill="rgb(237,225,25)" rx="2" ry="2" />
<text  x="80.75" y="335.5" >do_async_page_fault</text>
</g>
<g >
<title>protobuf_google_2fprotobuf_2fdescriptor_2eproto::StaticDescriptorInitializer::StaticDescriptorInitializer (1 samples, 0.48%)</title><rect x="873.8" y="309" width="5.7" height="15.0" fill="rgb(217,225,54)" rx="2" ry="2" />
<text  x="876.83" y="319.5" ></text>
</g>
<g >
<title>orc::StructColumnReader::nextInternal&lt;false&gt; (1 samples, 0.48%)</title><rect x="845.6" y="293" width="5.6" height="15.0" fill="rgb(233,161,16)" rx="2" ry="2" />
<text  x="848.60" y="303.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.48%)</title><rect x="382.6" y="69" width="5.7" height="15.0" fill="rgb(207,34,48)" rx="2" ry="2" />
<text  x="385.63" y="79.5" ></text>
</g>
<g >
<title>orc::RleDecoderV2::readLongBE (1 samples, 0.48%)</title><rect x="399.6" y="341" width="5.6" height="15.0" fill="rgb(238,100,30)" rx="2" ry="2" />
<text  x="402.57" y="351.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (25 samples, 11.96%)</title><rect x="879.5" y="197" width="141.1" height="15.0" fill="rgb(230,216,9)" rx="2" ry="2" />
<text  x="882.47" y="207.5" >generic_file_buff..</text>
</g>
<g >
<title>[unknown] (98 samples, 46.89%)</title><rect x="309.2" y="357" width="553.3" height="15.0" fill="rgb(215,127,27)" rx="2" ry="2" />
<text  x="312.23" y="367.5" >[unknown]</text>
</g>
<g >
<title>orc::RleDecoderV2::plainUnpackLongs (2 samples, 0.96%)</title><rect x="1161.8" y="357" width="11.3" height="15.0" fill="rgb(227,207,52)" rx="2" ry="2" />
<text  x="1164.77" y="367.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.48%)</title><rect x="856.9" y="197" width="5.6" height="15.0" fill="rgb(226,17,19)" rx="2" ry="2" />
<text  x="859.89" y="207.5" ></text>
</g>
<g >
<title>all (209 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(237,209,10)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>do_group_exit (2 samples, 0.96%)</title><rect x="1020.6" y="309" width="11.3" height="15.0" fill="rgb(243,70,51)" rx="2" ry="2" />
<text  x="1023.62" y="319.5" ></text>
</g>
<g >
<title>__do_page_fault (4 samples, 1.91%)</title><rect x="348.8" y="277" width="22.5" height="15.0" fill="rgb(248,179,7)" rx="2" ry="2" />
<text  x="351.76" y="287.5" >_..</text>
</g>
<g >
<title>rmqueue (1 samples, 0.48%)</title><rect x="958.5" y="85" width="5.7" height="15.0" fill="rgb(228,59,22)" rx="2" ry="2" />
<text  x="961.52" y="95.5" ></text>
</g>
<g >
<title>get_page_from_freelist (6 samples, 2.87%)</title><rect x="196.3" y="181" width="33.9" height="15.0" fill="rgb(214,220,6)" rx="2" ry="2" />
<text  x="199.32" y="191.5" >ge..</text>
</g>
<g >
<title>clear_page_erms (3 samples, 1.44%)</title><rect x="196.3" y="165" width="17.0" height="15.0" fill="rgb(240,148,0)" rx="2" ry="2" />
<text  x="199.32" y="175.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (2 samples, 0.96%)</title><rect x="986.7" y="69" width="11.3" height="15.0" fill="rgb(236,144,51)" rx="2" ry="2" />
<text  x="989.75" y="79.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (6 samples, 2.87%)</title><rect x="269.7" y="213" width="33.9" height="15.0" fill="rgb(228,117,21)" rx="2" ry="2" />
<text  x="272.71" y="223.5" >me..</text>
</g>
<g >
<title>do_page_fault (4 samples, 1.91%)</title><rect x="348.8" y="293" width="22.5" height="15.0" fill="rgb(250,82,11)" rx="2" ry="2" />
<text  x="351.76" y="303.5" >d..</text>
</g>
<g >
<title>ondemand_readahead (1 samples, 0.48%)</title><rect x="1015.0" y="165" width="5.6" height="15.0" fill="rgb(234,83,25)" rx="2" ry="2" />
<text  x="1017.98" y="175.5" ></text>
</g>
<g >
<title>__libc_pread64 (3 samples, 1.44%)</title><rect x="371.3" y="341" width="17.0" height="15.0" fill="rgb(221,83,24)" rx="2" ry="2" />
<text  x="374.34" y="351.5" ></text>
</g>
<g >
<title>ondemand_readahead (1 samples, 0.48%)</title><rect x="382.6" y="149" width="5.7" height="15.0" fill="rgb(241,102,11)" rx="2" ry="2" />
<text  x="385.63" y="159.5" ></text>
</g>
<g >
<title>__bio_try_merge_page (1 samples, 0.48%)</title><rect x="981.1" y="85" width="5.6" height="15.0" fill="rgb(228,102,22)" rx="2" ry="2" />
<text  x="984.10" y="95.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I_ClientNamenodeProtocol.pb.cc (1 samples, 0.48%)</title><rect x="862.5" y="357" width="5.7" height="15.0" fill="rgb(242,130,30)" rx="2" ry="2" />
<text  x="865.54" y="367.5" ></text>
</g>
<g >
<title>__munmap (2 samples, 0.96%)</title><rect x="851.2" y="309" width="11.3" height="15.0" fill="rgb(214,122,30)" rx="2" ry="2" />
<text  x="854.24" y="319.5" ></text>
</g>
<g >
<title>google::protobuf::GoogleOnceInitImpl (1 samples, 0.48%)</title><rect x="862.5" y="341" width="5.7" height="15.0" fill="rgb(215,26,49)" rx="2" ry="2" />
<text  x="865.54" y="351.5" ></text>
</g>
<g >
<title>down_read_trylock (1 samples, 0.48%)</title><rect x="151.1" y="261" width="5.7" height="15.0" fill="rgb(222,141,24)" rx="2" ry="2" />
<text  x="154.15" y="271.5" ></text>
</g>
<g >
<title>orc::RleDecoderV2::unrolledUnpack16 (5 samples, 2.39%)</title><rect x="405.2" y="341" width="28.2" height="15.0" fill="rgb(208,225,5)" rx="2" ry="2" />
<text  x="408.22" y="351.5" >o..</text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.48%)</title><rect x="851.2" y="181" width="5.7" height="15.0" fill="rgb(245,191,22)" rx="2" ry="2" />
<text  x="854.24" y="191.5" ></text>
</g>
<g >
<title>protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptorsImpl (1 samples, 0.48%)</title><rect x="873.8" y="229" width="5.7" height="15.0" fill="rgb(243,28,35)" rx="2" ry="2" />
<text  x="876.83" y="239.5" ></text>
</g>
<g >
<title>mmput (2 samples, 0.96%)</title><rect x="1020.6" y="277" width="11.3" height="15.0" fill="rgb(227,59,31)" rx="2" ry="2" />
<text  x="1023.62" y="287.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (13 samples, 6.22%)</title><rect x="941.6" y="149" width="73.4" height="15.0" fill="rgb(247,206,40)" rx="2" ry="2" />
<text  x="944.58" y="159.5" >__do_pag..</text>
</g>
<g >
<title>copy_page_to_iter (7 samples, 3.35%)</title><rect x="902.1" y="181" width="39.5" height="15.0" fill="rgb(206,137,29)" rx="2" ry="2" />
<text  x="905.06" y="191.5" >cop..</text>
</g>
<g >
<title>generic_file_read_iter (25 samples, 11.96%)</title><rect x="879.5" y="213" width="141.1" height="15.0" fill="rgb(218,113,1)" rx="2" ry="2" />
<text  x="882.47" y="223.5" >generic_file_read..</text>
</g>
<g >
<title>__alloc_pages_nodemask (8 samples, 3.83%)</title><rect x="185.0" y="197" width="45.2" height="15.0" fill="rgb(251,156,47)" rx="2" ry="2" />
<text  x="188.02" y="207.5" >__al..</text>
</g>
<g >
<title>get_vma_policy.part.0 (1 samples, 0.48%)</title><rect x="230.2" y="197" width="5.6" height="15.0" fill="rgb(230,32,36)" rx="2" ry="2" />
<text  x="233.19" y="207.5" ></text>
</g>
<g >
<title>xa_get_order (2 samples, 0.96%)</title><rect x="986.7" y="53" width="11.3" height="15.0" fill="rgb(208,204,19)" rx="2" ry="2" />
<text  x="989.75" y="63.5" ></text>
</g>
<g >
<title>ksys_pread64 (3 samples, 1.44%)</title><rect x="371.3" y="277" width="17.0" height="15.0" fill="rgb(220,73,8)" rx="2" ry="2" />
<text  x="374.34" y="287.5" ></text>
</g>
<g >
<title>async_page_fault (4 samples, 1.91%)</title><rect x="348.8" y="325" width="22.5" height="15.0" fill="rgb(208,46,9)" rx="2" ry="2" />
<text  x="351.76" y="335.5" >a..</text>
</g>
<g >
<title>__x64_sys_pread64 (25 samples, 11.96%)</title><rect x="879.5" y="309" width="141.1" height="15.0" fill="rgb(238,207,8)" rx="2" ry="2" />
<text  x="882.47" y="319.5" >__x64_sys_pread64</text>
</g>
<g >
<title>vfs_read (3 samples, 1.44%)</title><rect x="371.3" y="261" width="17.0" height="15.0" fill="rgb(233,59,22)" rx="2" ry="2" />
<text  x="374.34" y="271.5" ></text>
</g>
<g >
<title>google::protobuf::DescriptorPool::InternalAddGeneratedFile (1 samples, 0.48%)</title><rect x="873.8" y="213" width="5.7" height="15.0" fill="rgb(213,112,45)" rx="2" ry="2" />
<text  x="876.83" y="223.5" ></text>
</g>
<g >
<title>unmap_region (2 samples, 0.96%)</title><rect x="851.2" y="213" width="11.3" height="15.0" fill="rgb(225,47,7)" rx="2" ry="2" />
<text  x="854.24" y="223.5" ></text>
</g>
<g >
<title>_raw_spin_lock (4 samples, 1.91%)</title><rect x="162.4" y="229" width="22.6" height="15.0" fill="rgb(229,109,3)" rx="2" ry="2" />
<text  x="165.44" y="239.5" >_..</text>
</g>
<g >
<title>ext4_file_read_iter (3 samples, 1.44%)</title><rect x="371.3" y="213" width="17.0" height="15.0" fill="rgb(250,122,22)" rx="2" ry="2" />
<text  x="374.34" y="223.5" ></text>
</g>
<g >
<title>orc::BooleanRleDecoderImpl::next (12 samples, 5.74%)</title><rect x="1037.6" y="357" width="67.7" height="15.0" fill="rgb(205,43,9)" rx="2" ry="2" />
<text  x="1040.56" y="367.5" >orc::Bo..</text>
</g>
<g >
<title>ksys_pread64 (25 samples, 11.96%)</title><rect x="879.5" y="293" width="141.1" height="15.0" fill="rgb(239,13,11)" rx="2" ry="2" />
<text  x="882.47" y="303.5" >ksys_pread64</text>
</g>
<g >
<title>google::protobuf::GoogleOnceInitImpl (1 samples, 0.48%)</title><rect x="873.8" y="261" width="5.7" height="15.0" fill="rgb(220,105,9)" rx="2" ry="2" />
<text  x="876.83" y="271.5" ></text>
</g>
<g >
<title>alloc_pages_current (6 samples, 2.87%)</title><rect x="941.6" y="117" width="33.9" height="15.0" fill="rgb(250,77,17)" rx="2" ry="2" />
<text  x="944.58" y="127.5" >al..</text>
</g>
<g >
<title>mem_cgroup_try_charge (6 samples, 2.87%)</title><rect x="269.7" y="197" width="33.9" height="15.0" fill="rgb(238,216,45)" rx="2" ry="2" />
<text  x="272.71" y="207.5" >me..</text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.48%)</title><rect x="868.2" y="357" width="5.6" height="15.0" fill="rgb(216,203,20)" rx="2" ry="2" />
<text  x="871.18" y="367.5" ></text>
</g>
<g >
<title>google::protobuf::GoogleOnceInit (1 samples, 0.48%)</title><rect x="873.8" y="277" width="5.7" height="15.0" fill="rgb(223,144,19)" rx="2" ry="2" />
<text  x="876.83" y="287.5" ></text>
</g>
<g >
<title>ext4_readpages (3 samples, 1.44%)</title><rect x="981.1" y="117" width="16.9" height="15.0" fill="rgb(244,156,47)" rx="2" ry="2" />
<text  x="984.10" y="127.5" ></text>
</g>
<g >
<title>alloc_pages_vma (9 samples, 4.31%)</title><rect x="185.0" y="213" width="50.8" height="15.0" fill="rgb(207,10,18)" rx="2" ry="2" />
<text  x="188.02" y="223.5" >alloc..</text>
</g>
<g >
<title>google::protobuf::DescriptorPool::InternalAddGeneratedFile (1 samples, 0.48%)</title><rect x="862.5" y="309" width="5.7" height="15.0" fill="rgb(205,196,38)" rx="2" ry="2" />
<text  x="865.54" y="319.5" ></text>
</g>
<g >
<title>__cxx_global_var_init.2 (1 samples, 0.48%)</title><rect x="873.8" y="325" width="5.7" height="15.0" fill="rgb(250,154,9)" rx="2" ry="2" />
<text  x="876.83" y="335.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (11 samples, 5.26%)</title><rect x="309.2" y="341" width="62.1" height="15.0" fill="rgb(218,164,3)" rx="2" ry="2" />
<text  x="312.23" y="351.5" >[libc-..</text>
</g>
<g >
<title>release_pages (1 samples, 0.48%)</title><rect x="851.2" y="149" width="5.7" height="15.0" fill="rgb(215,153,20)" rx="2" ry="2" />
<text  x="854.24" y="159.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.48%)</title><rect x="851.2" y="197" width="5.7" height="15.0" fill="rgb(211,3,50)" rx="2" ry="2" />
<text  x="854.24" y="207.5" ></text>
</g>
<g >
<title>do_exit (2 samples, 0.96%)</title><rect x="1020.6" y="293" width="11.3" height="15.0" fill="rgb(217,150,9)" rx="2" ry="2" />
<text  x="1023.62" y="303.5" ></text>
</g>
<g >
<title>page_cache_async_readahead (1 samples, 0.48%)</title><rect x="382.6" y="165" width="5.7" height="15.0" fill="rgb(235,65,14)" rx="2" ry="2" />
<text  x="385.63" y="175.5" ></text>
</g>
<g >
<title>handle_mm_fault (3 samples, 1.44%)</title><rect x="354.4" y="245" width="16.9" height="15.0" fill="rgb(227,187,16)" rx="2" ry="2" />
<text  x="357.40" y="255.5" ></text>
</g>
<g >
<title>google::protobuf::internal::WireFormatLite::ReadMessage (1 samples, 0.48%)</title><rect x="873.8" y="117" width="5.7" height="15.0" fill="rgb(208,71,52)" rx="2" ry="2" />
<text  x="876.83" y="127.5" ></text>
</g>
<g >
<title>google::protobuf::internal::WireFormatLite::ReadMessage (1 samples, 0.48%)</title><rect x="873.8" y="149" width="5.7" height="15.0" fill="rgb(251,84,54)" rx="2" ry="2" />
<text  x="876.83" y="159.5" ></text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.96%)</title><rect x="851.2" y="245" width="11.3" height="15.0" fill="rgb(242,137,5)" rx="2" ry="2" />
<text  x="854.24" y="255.5" ></text>
</g>
<g >
<title>xa_load (1 samples, 0.48%)</title><rect x="1015.0" y="133" width="5.6" height="15.0" fill="rgb(250,104,54)" rx="2" ry="2" />
<text  x="1017.98" y="143.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.48%)</title><rect x="856.9" y="181" width="5.6" height="15.0" fill="rgb(240,212,7)" rx="2" ry="2" />
<text  x="859.89" y="191.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.48%)</title><rect x="851.2" y="165" width="5.7" height="15.0" fill="rgb(247,42,46)" rx="2" ry="2" />
<text  x="854.24" y="175.5" ></text>
</g>
<g >
<title>read_pages (3 samples, 1.44%)</title><rect x="981.1" y="133" width="16.9" height="15.0" fill="rgb(237,24,11)" rx="2" ry="2" />
<text  x="984.10" y="143.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 1.44%)</title><rect x="354.4" y="229" width="16.9" height="15.0" fill="rgb(210,149,14)" rx="2" ry="2" />
<text  x="357.40" y="239.5" ></text>
</g>
<g >
<title>alloc_pages_current (1 samples, 0.48%)</title><rect x="382.6" y="101" width="5.7" height="15.0" fill="rgb(249,193,5)" rx="2" ry="2" />
<text  x="385.63" y="111.5" ></text>
</g>
<g >
<title>google::protobuf::internal::FunctionClosure0::Run (1 samples, 0.48%)</title><rect x="873.8" y="245" width="5.7" height="15.0" fill="rgb(224,195,10)" rx="2" ry="2" />
<text  x="876.83" y="255.5" ></text>
</g>
<g >
<title>do_async_page_fault (4 samples, 1.91%)</title><rect x="348.8" y="309" width="22.5" height="15.0" fill="rgb(205,142,3)" rx="2" ry="2" />
<text  x="351.76" y="319.5" >d..</text>
</g>
<g >
<title>release_pages (1 samples, 0.48%)</title><rect x="252.8" y="165" width="5.6" height="15.0" fill="rgb(246,74,39)" rx="2" ry="2" />
<text  x="255.78" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.96%)</title><rect x="1020.6" y="357" width="11.3" height="15.0" fill="rgb(226,204,6)" rx="2" ry="2" />
<text  x="1023.62" y="367.5" ></text>
</g>
<g >
<title>orc-scan (209 samples, 100.00%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(244,70,22)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >orc-scan</text>
</g>
</g>
</svg>
